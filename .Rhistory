"Friday" = "00:00"
),
"Hojoon" = list(
"Monday" = "00:00",
"Tuesday" ="00:00",
"Wednesday" =  c("12:00-12:30", "12:30-13:00", "13:00-13:30", "13:30-14:00"),
"Thursday" =  c("15:00-15:30", "15:30-16:00", "16:00-16:30", "16:30-17:00"),
"Friday" = "00:00"
),
"Kayla" = list(
"Monday" = "00:00",
"Tuesday" = c("13:30-14:00", "14:00-14:30", "14:30-15:00", "15:00-15:30"),
"Wednesday" =  c("10:30-11:00","11:00-11:30", "11:30-12:00", "12:00-12:30"),
"Thursday" = "00:00",
"Friday" = "00:00"
),
"Choose a TA" = list("Monday" = "00:00", "Tuesday" = "00:00", "Wednesday" = "00:00", "Thursday" = "00:00", "Friday" = "00:00")
)
## Download latest from Dropbox
# Loaction for my local file paths. If the github directory is on dropbox, this will be the same as dropbx_file_locs
local_drpbx_dir <- file.path(".", "mphcapstoneta", "www")
# # To use a stored token provide token location
# drop_auth(rdstoken = "droptoken.rds")
# Dropbox online file paths
dropbx_file_locs <- file.path("GitHub", "MPHcapstoneTA", "mphcapstoneta", "www")
drop_download(file.path("mphcapstoneta", "reservations.Rdata"), overwrite = TRUE, dtoken = token)
drop_download(file.path(dropbx_file_locs, "publicCalendar.ics"), local_path = file.path(local_drpbx_dir, "publicCalendar.ics"), overwrite = TRUE, dtoken = token)
drop_download(file.path(dropbx_file_locs, "publicCalendar-Stephen.ics"), local_path = file.path(local_drpbx_dir, "publicCalendar-Stephen.ics"), overwrite = TRUE, dtoken = token)
drop_download(file.path(dropbx_file_locs, "publicCalendar-Jordan.ics"), local_path =  file.path(local_drpbx_dir, "publicCalendar-Jordan.ics"), overwrite = TRUE, dtoken = token)
drop_download(file.path(dropbx_file_locs, "publicCalendar-Hojoon.ics"), local_path = file.path(local_drpbx_dir, "publicCalendar-Hojoon.ics"), overwrite = TRUE, dtoken = token)
drop_download(file.path(dropbx_file_locs, "publicCalendar-Kayla.ics"), local_path = file.path(local_drpbx_dir, "publicCalendar-Kayla.ics"), overwrite = TRUE, dtoken = token)
drop_download(file.path(dropbx_file_locs, "publicCalendar-Daniel.ics"), local_path = file.path(local_drpbx_dir, "publicCalendar-Daniel.ics"), overwrite = TRUE, dtoken = token)
drop_download(file.path("GitHub", "MPHcapstoneTA", "mphcapstoneta", "reservations.Rdata"), overwrite = TRUE, dtoken = token)
drop_download(file.path(dropbx_file_locs, "publicCalendar.ics"), local_path = file.path(local_drpbx_dir, "publicCalendar.ics"), overwrite = TRUE, dtoken = token)
drop_download(file.path(dropbx_file_locs, "publicCalendar-Stephen.ics"), local_path = file.path(local_drpbx_dir, "publicCalendar-Stephen.ics"), overwrite = TRUE, dtoken = token)
drop_download(file.path(dropbx_file_locs, "publicCalendar-Jordan.ics"), local_path =  file.path(local_drpbx_dir, "publicCalendar-Jordan.ics"), overwrite = TRUE, dtoken = token)
drop_download(file.path(dropbx_file_locs, "publicCalendar-Hojoon.ics"), local_path = file.path(local_drpbx_dir, "publicCalendar-Hojoon.ics"), overwrite = TRUE, dtoken = token)
drop_download(file.path(dropbx_file_locs, "publicCalendar-Kayla.ics"), local_path = file.path(local_drpbx_dir, "publicCalendar-Kayla.ics"), overwrite = TRUE, dtoken = token)
drop_download(file.path(dropbx_file_locs, "publicCalendar-Daniel.ics"), local_path = file.path(local_drpbx_dir, "publicCalendar-Daniel.ics"), overwrite = TRUE, dtoken = token)
library(shiny)
runApp()
rsconnect::deployApp()
library(shiny)
runApp()
rsconnect::deployApp()
library(shiny)
runApp()
library(shiny)
runApp()
library(shiny)
runApp()
library(shiny)
runApp()
rsconnect::deployApp()
?selectInput
?textInput
?verbatimTextOutput
library(shinythemes)
?fluidpage
library(shiny)
?fluidpage
shinythemes::shinytheme()
?shinythemes::shinytheme()
rsconnect::deployApp()
??curl
req <- curl_fetch_memory("https://httpbin.org/get")
str(req)
req <- curl::curl_fetch_memory("https://httpbin.org/get")
str(req)
rsconnect::deployApp()
rsconnect::setAccountInfo(name='mphcapstoneta',
token='F50FFD47EC2BFF1DA5392723D6238335',
secret='Uoi9O1D7vqWmztiVWHtmTQBSgw6tNu+L+DsSD7rT')
rsconnect.check.certificate
?rsconnect.check.certificate
??rsconnect.check.certificate
library(rsconnect.check.certificate)
library(rsconnect)
options(rsconnect.check.certificate = F)
rsconnect::setAccountInfo(name='mphcapstoneta',
token='F50FFD47EC2BFF1DA5392723D6238335',
secret='Uoi9O1D7vqWmztiVWHtmTQBSgw6tNu+L+DsSD7rT')
deployApp()
options(rsconnect.check.certificate = T)
library(readxl)
library(dplyr)
#rooms <- read_excel("report - MPH Capstone TA office hours - revised.xlsx")
rooms <- read_excel("report - MPH Capstone TA office hours - revised.xlsx")
rooms <- rooms %>% filter(complete.cases(rooms))
rooms <- rooms %>% mutate(date=as.Date(`Start Date`, format="%m/%d/%y"))
rooms <- rooms %>% arrange(date)
tas <- c("Kundu", "Sosina", "Antiporta", "Lee", "Tormohlen", "Baker")
TAroom <- lapply(tas, function(ta) {
use <- rooms[grepl(ta, rooms$Name), ]
res <- use$Room
names(res) <- as.character(use$date)
return(res)
})
names(TAroom) = c("Prosenjit", "Kayode", "Daniel", "Hojoon", "Kayla", "Kellan")
save(TAroom, file = "TAroom.Rdata")
library(shiny)
runApp()
load("TAroom.Rdata")
TAroom
assignRoom <- function(TA, desiredDate) {
if(TA %in% names(TAroom)) {
possibleRooms <- TAroom[[TA]]
charDate <- as.character(as.Date(desiredDate, tz="America/New_York"))
if(charDate %in% names(possibleRooms)) {
mtgRoom <- possibleRooms[[charDate]]
} else {
mtgRoom <- "*to be determined*"
}
} else {
mtgRoom <- "*to be determined*"
}
## Done
return(mtgRoom)
}
assignRoom("Kayode")
assignRoom("Kayode", "02-05-2018")
names(TAroom
)
library(shiny)
runApp()
TAroom
assignRoom("Kayode", "2020-01-29")
?as.Date
rooms <- read_excel("report - MPH Capstone TA office hours - revised.xlsx")
rooms <- rooms %>% filter(complete.cases(rooms))
rooms %>% mutate(date=as.Date(`Start Date`, format="%m/%d/%y", tz="America/New_York"))
rooms %>% mutate(date=as.Date(`Start Date`, format="%m/%d/%y"))
rooms <- read_excel("report - MPH Capstone TA office hours - revised.xlsx")
rooms <- rooms %>% filter(complete.cases(rooms))
rooms <- rooms %>% mutate(date=as.Date(`Start Date`, format="%m/%d/%y", tz="America/New_York"))
rooms <- rooms %>% arrange(date)
tas <- c("Kundu", "Sosina", "Antiporta", "Lee", "Tormohlen", "Baker")
TAroom <- lapply(tas, function(ta) {
use <- rooms[grepl(ta, rooms$Name), ]
res <- use$Room
names(res) <- as.character(use$date)
return(res)
})
TAroom
use$date
rooms$date
rooms %>% mutate(date=as.Date(`Start Date`, format="%m/%d/%y", tz="America/New_York"))
?Date
?as.Date
rooms <- read_excel("report - MPH Capstone TA office hours - revised.xlsx")
rooms <- rooms %>% filter(complete.cases(rooms))
rooms
rooms <- read_excel("report - MPH Capstone TA office hours - revised.xlsx")
rooms <- rooms %>% filter(complete.cases(rooms))
rooms <- rooms %>% mutate(date=as.Date(`Start Date`, format="%m/%d/%y", tz="America/New_York"))
rooms <- rooms %>% arrange(date)
tas <- c("Kundu", "Sosina", "Antiporta", "Lee", "Tormohlen", "Baker")
TAroom <- lapply(tas, function(ta) {
use <- rooms[grepl(ta, rooms$Name), ]
res <- use$Room
names(res) <- as.character(use$date)
return(res)
})
names(TAroom) = c("Prosenjit", "Kayode", "Daniel", "Hojoon", "Kayla", "Kellan")
save(TAroom, file = "TAroom.Rdata")
assignRoom("Kayode", "2020-01-29")
assignRoom("Kayode", "01-29-2020")
rooms %>% mutate(date=as.Date(`Start Date`, tz="America/New_York"))
rooms <- read_excel("report - MPH Capstone TA office hours - revised.xlsx")
rooms <- rooms %>% filter(complete.cases(rooms))
rooms %>% mutate(date=as.Date(`Start Date`, tz="America/New_York"))
rooms %>% mutate(date=as.Date(`Start Date`, format="%m/%d/%y"))
rooms %>% mutate(date=as.Date(`Start Date`, format="%m/%d/%y", tz="America/New_York"))
as.Date("2/6/2019", format="%m/%d/%y", tz="America/New_York")
as.Date("2/6/2019", format="%m/%d/%y")
dates <- c("02/27/92", "02/27/92", "01/14/92", "02/28/92", "02/01/92")
as.Date(dates, "%m/%d/%y")
?strptime
rooms <- rooms %>% mutate(date=as.Date(`Start Date`, format="%m/%d/%Y", tz="America/New_York"))
rooms
rooms <- read_excel("report - MPH Capstone TA office hours - revised.xlsx")
rooms <- rooms %>% filter(complete.cases(rooms))
rooms <- rooms %>% mutate(date=as.Date(`Start Date`, format="%m/%d/%Y", tz="America/New_York"))
rooms <- rooms %>% arrange(date)
tas <- c("Kundu", "Sosina", "Antiporta", "Lee", "Tormohlen", "Baker")
TAroom <- lapply(tas, function(ta) {
use <- rooms[grepl(ta, rooms$Name), ]
res <- use$Room
names(res) <- as.character(use$date)
return(res)
})
names(TAroom) = c("Prosenjit", "Kayode", "Daniel", "Hojoon", "Kayla", "Kellan")
save(TAroom, file = "TAroom.Rdata")
library(shiny)
runApp()
rsconnect::deployApp()
options(rsconnect.check.certificate = F)
rsconnect::deployApp()
options(rsconnect.check.certificate = T)
rooms <- read_excel("report - MPH Capstone TA office hours - revised.xlsx")
rooms <- rooms %>% filter(complete.cases(rooms))
rooms <- rooms %>% mutate(date=as.Date(`Start Date`, format="%m/%d/%Y", tz="America/New_York"))
rooms <- rooms %>% arrange(date)
tas <- c("Kundu", "Sosina", "Antiporta", "Lee", "Tormohlen", "Baker")
TAroom <- lapply(tas, function(ta) {
use <- rooms[grepl(ta, rooms$Name), ]
res <- use$Room
names(res) <- as.character(use$date)
return(res)
})
names(TAroom) = c("Prosenjit", "Kayode", "Daniel", "Hojoon", "Kayla", "Kellan")
save(TAroom, file = "TAroom.Rdata")
options(rsconnect.check.certificate = F)
rsconnect::deployApp()
TAroom
rooms <- read_excel("report - MPH Capstone TA office hours - revised.xlsx")
rooms <- rooms %>% filter(complete.cases(rooms))
rooms <- rooms %>% mutate(date=as.Date(`Start Date`, format="%m/%d/%Y", tz="America/New_York"))
rooms <- rooms %>% arrange(date)
rooms
tas <- c("Kundu", "Sosina", "Antiporta", "Lee", "Tormohlen", "Baker")
TAroom <- lapply(tas, function(ta) {
use <- rooms[grepl(ta, rooms$Name), ]
res <- use$Room
names(res) <- as.character(use$date)
return(res)
})
names(TAroom) = c("Prosenjit", "Kayode", "Daniel", "Hojoon", "Kayla", "Kellan")
TAroom
#rooms <- read_excel("report - MPH Capstone TA office hours - revised.xlsx")
rooms <- read_excel("report - MPH Capstone TA office hours - revised.xlsx")
rooms <- rooms %>% filter(complete.cases(rooms))
rooms <- rooms %>% mutate(date=as.Date(`Start Date`, format="%m/%d/%Y", tz="America/New_York"))
rooms <- rooms %>% arrange(date)
tas <- c("Kundu", "Sosina", "Antiporta", "Lee", "Tormohlen", "Baker")
TAroom <- lapply(tas, function(ta) {
use <- rooms[grepl(ta, rooms$Name), ]
res <- use$Room
names(res) <- as.character(use$date)
return(res)
})
names(TAroom) = c("Prosenjit", "Kayode", "Daniel", "Hojoon", "Kayla", "Kellan")
save(TAroom, file = "TAroom.Rdata")
TAroom
rooms <- read_excel("report - MPH Capstone TA office hours - revised.xlsx")
rooms <- rooms %>% filter(complete.cases(rooms))
rooms <- rooms %>% mutate(date=as.Date(`Start Date`, format="%m/%d/%Y", tz="America/New_York"))
rooms <- rooms %>% arrange(date)
tas <- c("Kundu", "Sosina", "Antiporta", "Lee", "Tormohlen", "Baker")
TAroom <- lapply(tas, function(ta) {
use <- rooms[grepl(ta, rooms$Name), ]
res <- use$Room
names(res) <- as.character(use$date)
return(res)
})
names(TAroom) = c("Prosenjit", "Kayode", "Daniel", "Hojoon", "Kayla", "Kellan")
save(TAroom, file = "TAroom.Rdata")
TAroom
#rooms <- read_excel("report - MPH Capstone TA office hours - revised.xlsx")
rooms <- read_excel("report - MPH Capstone TA office hours - revised.xlsx")
rooms <- rooms %>% filter(complete.cases(rooms))
rooms <- rooms %>% mutate(date=as.Date(`Start Date`, format="%m/%d/%Y", tz="America/New_York"))
rooms <- rooms %>% arrange(date)
rooms[grepl("Antiporta", rooms$Name), ]
data.table::data.table(rooms[grepl("Antiporta", rooms$Name), ])
rooms <- read_excel("report - MPH Capstone TA office hours - revised.xlsx")
rooms <- rooms %>% filter(complete.cases(rooms))
rooms <- rooms %>% mutate(date=as.Date(`Start Date`, format="%m/%d/%Y", tz="America/New_York"))
rooms <- rooms %>% arrange(date)
data.table::data.table(rooms[grepl("Antiporta", rooms$Name), ])
rooms <- read_excel("report - MPH Capstone TA office hours - revised.xlsx")
rooms <- rooms %>% filter(complete.cases(rooms))
rooms <- rooms %>% mutate(date=as.Date(`Start Date`, format="%m/%d/%Y", tz="America/New_York"))
rooms <- rooms %>% arrange(date)
tas <- c("Kundu", "Sosina", "Antiporta", "Lee", "Tormohlen", "Baker")
TAroom <- lapply(tas, function(ta) {
use <- rooms[grepl(ta, rooms$Name), ]
res <- use$Room
names(res) <- as.character(use$date)
return(res)
})
names(TAroom) = c("Prosenjit", "Kayode", "Daniel", "Hojoon", "Kayla", "Kellan")
save(TAroom, file = "TAroom.Rdata")
rsconnect::deployApp()
rooms <- read_excel("report - MPH Capstone TA office hours - revised.xlsx")
rooms <- rooms %>% filter(complete.cases(rooms))
rooms <- rooms %>% mutate(date=as.Date(`Start Date`, format="%m/%d/%Y", tz="America/New_York"))
rooms <- rooms %>% arrange(date)
tas <- c("Kundu", "Sosina", "Antiporta", "Lee", "Tormohlen", "Baker")
TAroom <- lapply(tas, function(ta) {
use <- rooms[grepl(ta, rooms$Name), ]
res <- use$Room
names(res) <- as.character(use$date)
return(res)
})
names(TAroom) = c("Prosenjit", "Kayode", "Daniel", "Hojoon", "Kayla", "Kellan")
save(TAroom, file = "TAroom.Rdata")
TAroom
options(rsconnect.check.certificate = F)
rsconnect::deployApp()
options(rsconnect.check.certificate = T)
dir()
dir("./mphcapstoneta")
dir("./mphcapstoneta/backups")
load("./mphcapstoneta/backups/reservations_backup-2019-01-31_20_40_17.Rdata")
View(reservations)
load("./mphcapstoneta/backups/reservations_backup-2019-01-30_18_52_25.Rdata")
View(reservations)
load("./mphcapstoneta/backups/reservations_backup-2019-01-30_20_01_31.Rdata")
load("./mphcapstoneta/backups/reservations_backup-2019-01-30_19_35_42.Rdata")
load("./mphcapstoneta/backups/reservations_backup-2019-01-30_19_35_50.Rdata")
View(reservations)
load("./mphcapstoneta/backups/reservations_backup-2019-01-30_20_01_23.Rdata")
View(reservations)
load("./mphcapstoneta/backups/reservations_backup-2019-01-30_20_01_23.Rdata")
load("./mphcapstoneta/backups/reservations_backup-2019-01-30_20_01_31.Rdata")
library(shiny)
?observeEvent
?isolate
library(shiny)
runApp()
loadReservationsFunc
options(rsconnect.check.certificate = F)
?rsconnect::deployApp()
rsconnect::deployApp(forceUpdate = T)
options(rsconnect.check.certificate = T)
?trimws
library(shiny)
runApp()
library(shiny)
runApp()
options(rsconnect.check.certificate = F)
rsconnect::deployApp(forceUpdate = T)
loadReservations()
loadReservationsFunc <- function() {
if(file.exists("reservations.Rdata") & file.exists('reservationsHist.Rdata')) {
load('reservationsHist.Rdata')
## Check if it's the latest version
newHist <- drop_history(dropbox_reservation_file, dtoken = token)
if(!identical(newHist, reservationsHist)) {
drop_download(dropbox_reservation_file, overwrite = TRUE, dtoken = token)
}
load("reservations.Rdata")
} else {
reservations <- data.frame("TA"=NA, "Weekday"=NA, "officeHour"=NA, "Student"=NA, "Email"=NA, "Distance"=NA, "Skype"=NA, "reservationDate"=Sys.time() -1, "Concentration"=NA, "Description"=NA, "minimumPossible"=as.POSIXlt(Sys.time() -1, "America/New_York"), "desiredDate"=as.POSIXlt(Sys.time() -1, "America/New_York"), stringsAsFactors=FALSE)
saveRes(reservations)
}
reservations$reservationDate <- as.POSIXlt(reservations$reservationDate, "America/New_York")
reservations$minimumPossible <- as.POSIXlt(reservations$minimumPossible, "America/New_York")
#reservations$desiredDate <- as.POSIXlt(reservations$desiredDate, "America/New_York")
reservations
}
loadReservationsFunc()
new
idx <- with(reservations, which(trimws(TA) == trimws("Kellan") & trimws(tolower(Student)) == trimws(tolower("berje shammassian")) &
trimws(tolower(Email)) == trimws(tolower("bshamma1@jhu.edu")) & Distance == "No" &
Skype == "" & Concentration == "3. Epidemiologic & Biostatistics Methods for Public Health & Clinical Research" & desiredDate == "2019-02-04 12:00:00"))
reservations <- loadReservationsFunc()
idx <- with(reservations, which(trimws(TA) == trimws("Kellan") & trimws(tolower(Student)) == trimws(tolower("berje shammassian")) &
trimws(tolower(Email)) == trimws(tolower("bshamma1@jhu.edu")) & Distance == "No" &
Skype == "" & Concentration == "3. Epidemiologic & Biostatistics Methods for Public Health & Clinical Research" & desiredDate == "2019-02-04 12:00:00"))
idx
reservations[-idx, ]
load(reservationsHist.Rdata)
load("reservationsHist.Rdata")
View(reservationsHist)
?save
dir()
library(shiny)
runApp()
library(shiny)
runApp()
options(rsconnect.check.certificate = F)
rsconnect::deployApp(forceUpdate = T)
options(rsconnect.check.certificate = T)
dir()
load("reservations.Rdata")
View(reservations)
reservations
Sys.time() -1
data.frame("TA"="Daniel", "Weekday"="Monday", "officeHour"="13:30-14:00", "Student"="Isabella Gomes", "Email"="igomes3@jhu.edu", "Distance"="No", "Skype"="", "reservationDate"="2019-01-30 14:35:18 EST", "Concentration"="3. Epidemiologic & Biostatistics Methods for Public Health & Clinical Research", "Description"="Am dealing with a composite outcome, having issues with data management.",
"minimumPossible"=as.POSIXlt(Sys.time() -1, "America/New_York"), "desiredDate"="2019-02-11 13:30:00", stringsAsFactors=FALSE)
data.frame("TA"="Daniel", "Weekday"="Monday", "officeHour"="13:30-14:00", "Student"="Isabella Gomes", "Email"="igomes3@jhu.edu", "Distance"="No", "Skype"="", "reservationDate"="2019-01-30 14:35:18 EST", "Concentration"="3. Epidemiologic & Biostatistics Methods for Public Health & Clinical Research", "Description"="Am dealing with a composite outcome, having issues with data management.",
"minimumPossible"=as.POSIXlt(Sys.time() -1, "America/New_York"), "desiredDate"="2019-02-11 13:30:00", stringsAsFactors=FALSE)
data.frame("TA"="Kayla", "Weekday"="Monday", "officeHour"="14:30-15:00", "Student"="Anisa Sanghrajka", "Email"="asanghr1@jhu.edu", "Distance"="No", "Skype"="", "reservationDate"="2019-01-31 20:54:18 EST", "Concentration"="10. Social & Behavioral Sciences in Public Health", "Description"="Hi Kayla! I am hoping to brainstorm ideas for my capstone project, which will be a continuation of my practicum experience (developing a curriculum for a mindfulness intervention in Baltimore City High School)", "minimumPossible"=as.POSIXlt(Sys.time() -1, "America/New_York"), "desiredDate"="2019-02-04 14:30:00", stringsAsFactors=FALSE)
rbind(reservations,
data.frame("TA"="Daniel", "Weekday"="Monday", "officeHour"="13:30-14:00", "Student"="Isabella Gomes", "Email"="igomes3@jhu.edu", "Distance"="No", "Skype"="", "reservationDate"="2019-01-30 14:35:18 EST", "Concentration"="3. Epidemiologic & Biostatistics Methods for Public Health & Clinical Research", "Description"="Am dealing with a composite outcome, having issues with data management.",
"minimumPossible"=as.POSIXlt(Sys.time() -1, "America/New_York"), "desiredDate"="2019-02-04 13:30:00", stringsAsFactors=FALSE),
data.frame("TA"="Kayla", "Weekday"="Monday", "officeHour"="14:30-15:00", "Student"="Anisa Sanghrajka", "Email"="asanghr1@jhu.edu", "Distance"="No", "Skype"="", "reservationDate"="2019-01-31 20:54:18 EST", "Concentration"="10. Social & Behavioral Sciences in Public Health", "Description"="Hi Kayla! I am hoping to brainstorm ideas for my capstone project, which will be a continuation of my practicum experience (developing a curriculum for a mindfulness intervention in Baltimore City High School)", "minimumPossible"=as.POSIXlt(Sys.time() -1, "America/New_York"), "desiredDate"="2019-02-04 14:30:00", stringsAsFactors=FALSE))
rbind(reservations,
data.frame("TA"="Daniel", "Weekday"="Monday", "officeHour"="13:30-14:00", "Student"="Isabella Gomes", "Email"="igomes3@jhu.edu", "Distance"="No", "Skype"="", "reservationDate"="2019-01-30 14:35:18 EST", "Concentration"="3. Epidemiologic & Biostatistics Methods for Public Health & Clinical Research", "Description"="Am dealing with a composite outcome, having issues with data management.",
"minimumPossible"=as.POSIXlt(Sys.time() -1, "America/New_York"), "desiredDate"="2019-02-04 13:30:00", stringsAsFactors=FALSE),
data.frame("TA"="Kayla", "Weekday"="Monday", "officeHour"="14:30-15:00", "Student"="Anisa Sanghrajka", "Email"="asanghr1@jhu.edu", "Distance"="No", "Skype"="", "reservationDate"="2019-01-31 20:54:18 EST", "Concentration"="10. Social & Behavioral Sciences in Public Health", "Description"="Hi Kayla! I am hoping to brainstorm ideas for my capstone project, which will be a continuation of my practicum experience (developing a curriculum for a mindfulness intervention in Baltimore City High School)", "minimumPossible"=as.POSIXlt(Sys.time() -1, "America/New_York"), "desiredDate"="2019-02-04 14:30:00", stringsAsFactors=FALSE),
data.frame("TA"="Kayla", "Weekday"="Monday", "officeHour"="15:00-15:30", "Student"="Jenna", "Email"="jdifili1@jhmi.edu", "Distance"="No", "Skype"="", "reservationDate"="2019-01-31 14:38:18 EST", "Concentration"="6. Health in Crisis & Humanitarian Assistance", "Description"="General format and structure of a literature review with some Mesh term clarification. ", "minimumPossible"=as.POSIXlt(Sys.time() -1, "America/New_York"), "desiredDate"="2019-02-04 15:00:00", stringsAsFactors=FALSE))
rbind(reservations[-2,,],
data.frame("TA"="Daniel", "Weekday"="Monday", "officeHour"="13:30-14:00", "Student"="Isabella Gomes", "Email"="igomes3@jhu.edu", "Distance"="No", "Skype"="", "reservationDate"="2019-01-30 14:35:18 EST", "Concentration"="3. Epidemiologic & Biostatistics Methods for Public Health & Clinical Research", "Description"="Am dealing with a composite outcome, having issues with data management.",
"minimumPossible"=as.POSIXlt(Sys.time() -1, "America/New_York"), "desiredDate"="2019-02-04 13:30:00", stringsAsFactors=FALSE),
data.frame("TA"="Kayla", "Weekday"="Monday", "officeHour"="14:30-15:00", "Student"="Anisa Sanghrajka", "Email"="asanghr1@jhu.edu", "Distance"="No", "Skype"="", "reservationDate"="2019-01-31 20:54:18 EST", "Concentration"="10. Social & Behavioral Sciences in Public Health", "Description"="Hi Kayla! I am hoping to brainstorm ideas for my capstone project, which will be a continuation of my practicum experience (developing a curriculum for a mindfulness intervention in Baltimore City High School)", "minimumPossible"=as.POSIXlt(Sys.time() -1, "America/New_York"), "desiredDate"="2019-02-04 14:30:00", stringsAsFactors=FALSE),
data.frame("TA"="Kayla", "Weekday"="Monday", "officeHour"="15:00-15:30", "Student"="Jenna", "Email"="jdifili1@jhmi.edu", "Distance"="No", "Skype"="", "reservationDate"="2019-01-31 14:38:18 EST", "Concentration"="6. Health in Crisis & Humanitarian Assistance", "Description"="General format and structure of a literature review with some Mesh term clarification. ", "minimumPossible"=as.POSIXlt(Sys.time() -1, "America/New_York"), "desiredDate"="2019-02-04 15:00:00", stringsAsFactors=FALSE))
reservations
rbind(reservations[-c(2,5),],
data.frame("TA"="Daniel", "Weekday"="Monday", "officeHour"="13:30-14:00", "Student"="Isabella Gomes", "Email"="igomes3@jhu.edu", "Distance"="No", "Skype"="", "reservationDate"="2019-01-30 14:35:18 EST", "Concentration"="3. Epidemiologic & Biostatistics Methods for Public Health & Clinical Research", "Description"="Am dealing with a composite outcome, having issues with data management.",
"minimumPossible"=as.POSIXlt(Sys.time() -1, "America/New_York"), "desiredDate"="2019-02-04 13:30:00", stringsAsFactors=FALSE),
data.frame("TA"="Kayla", "Weekday"="Monday", "officeHour"="14:30-15:00", "Student"="Anisa Sanghrajka", "Email"="asanghr1@jhu.edu", "Distance"="No", "Skype"="", "reservationDate"="2019-01-31 20:54:18 EST", "Concentration"="10. Social & Behavioral Sciences in Public Health", "Description"="Hi Kayla! I am hoping to brainstorm ideas for my capstone project, which will be a continuation of my practicum experience (developing a curriculum for a mindfulness intervention in Baltimore City High School)", "minimumPossible"=as.POSIXlt(Sys.time() -1, "America/New_York"), "desiredDate"="2019-02-04 14:30:00", stringsAsFactors=FALSE),
data.frame("TA"="Kayla", "Weekday"="Monday", "officeHour"="15:00-15:30", "Student"="Jenna", "Email"="jdifili1@jhmi.edu", "Distance"="No", "Skype"="", "reservationDate"="2019-01-31 14:38:18 EST", "Concentration"="6. Health in Crisis & Humanitarian Assistance", "Description"="General format and structure of a literature review with some Mesh term clarification. ", "minimumPossible"=as.POSIXlt(Sys.time() -1, "America/New_York"), "desiredDate"="2019-02-04 15:00:00", stringsAsFactors=FALSE))
reservations <- rbind(reservations[-c(2,5),],
data.frame("TA"="Daniel", "Weekday"="Monday", "officeHour"="13:30-14:00", "Student"="Isabella Gomes", "Email"="igomes3@jhu.edu", "Distance"="No", "Skype"="", "reservationDate"="2019-01-30 14:35:18 EST", "Concentration"="3. Epidemiologic & Biostatistics Methods for Public Health & Clinical Research", "Description"="Am dealing with a composite outcome, having issues with data management.",
"minimumPossible"=as.POSIXlt(Sys.time() -1, "America/New_York"), "desiredDate"="2019-02-04 13:30:00", stringsAsFactors=FALSE),
data.frame("TA"="Kayla", "Weekday"="Monday", "officeHour"="14:30-15:00", "Student"="Anisa Sanghrajka", "Email"="asanghr1@jhu.edu", "Distance"="No", "Skype"="", "reservationDate"="2019-01-31 20:54:18 EST", "Concentration"="10. Social & Behavioral Sciences in Public Health", "Description"="Hi Kayla! I am hoping to brainstorm ideas for my capstone project, which will be a continuation of my practicum experience (developing a curriculum for a mindfulness intervention in Baltimore City High School)", "minimumPossible"=as.POSIXlt(Sys.time() -1, "America/New_York"), "desiredDate"="2019-02-04 14:30:00", stringsAsFactors=FALSE),
data.frame("TA"="Kayla", "Weekday"="Monday", "officeHour"="15:00-15:30", "Student"="Jenna", "Email"="jdifili1@jhmi.edu", "Distance"="No", "Skype"="", "reservationDate"="2019-01-31 14:38:18 EST", "Concentration"="6. Health in Crisis & Humanitarian Assistance", "Description"="General format and structure of a literature review with some Mesh term clarification. ", "minimumPossible"=as.POSIXlt(Sys.time() -1, "America/New_York"), "desiredDate"="2019-02-04 15:00:00", stringsAsFactors=FALSE))
calendarBuild <- function(file, reservations, public=TRUE) {
reservations <- reservations[!is.na(reservations$TA), ]
sink(file)
cat("BEGIN:VCALENDAR\n")
cat("VERSION:2.0\n")
cat("PRODID:-//JHSPH//MPHcapstone//EN\n")
for (i in seq_len(nrow(reservations))) {
stamp <- constructDate(reservations$reservationDate[i])
start <- constructDate(reservations$desiredDate[i])
end <- constructDate(reservations$desiredDate[i] + 30 * 60)
cat("BEGIN:VEVENT\n")
if(public) {
cat(paste("SUMMARY: TA", reservations$TA[i], "Student", reservations$Student[i], "Location", assignRoom(reservations$TA[i], reservations$desiredDate[i]), "\n", sep=" "))
} else {
cat(paste("SUMMARY:", reservations$Student[i], reservations$Email[i], reservations$Skype[i], reservations$Concentration[i], assignRoom(reservations$TA[i], reservations$desiredDate[i]), "\n", sep=" "))
}
cat(paste0("DTSTAMP:", stamp, "\n"))
cat(paste0("DTSTART;TZID=US/Eastern:", start, "\n"))
cat(paste0("DTEND;TZID=US/Eastern:", end, "\n"))
cat("END:VEVENT\n")
}
cat("END:VCALENDAR")
cat("\n")
sink()
drop_upload(file, path = "Github/MPHcapstoneTA/www", dtoken = token)
}
constructDate <- function(x) {
y <- as.POSIXlt(x)
year <- as.character(y$year + 1900)
tmp <- as.character(y$mon + 1)
mon <- ifelse(nchar(tmp) == 1, paste0(c("0", tmp), collapse=""), tmp)
tmp <- as.character(y$mday)
mday <- ifelse(nchar(tmp) == 1, paste0(c("0", tmp), collapse=""), tmp)
tmp <- as.character(y$hour)
hour <- ifelse(nchar(tmp) == 1, paste0(c("0", tmp), collapse=""), tmp)
tmp <- as.character(y$min)
minute <- ifelse(nchar(tmp) == 1, paste0(c("0", tmp), collapse=""), tmp)
paste0(year, mon, mday, "T", hour, minute, "00")
}
## Update calendar
calendarBuild("www/publicCalendar.ics", reservations, TRUE)
assignRoom <- function(TA, desiredDate) {
if(TA %in% names(TAroom)) {
possibleRooms <- TAroom[[TA]]
charDate <- as.character(as.Date(desiredDate, tz="America/New_York"))
if(charDate %in% names(possibleRooms)) {
mtgRoom <- possibleRooms[[charDate]]
} else {
mtgRoom <- "*to be determined*"
}
} else {
mtgRoom <- "*to be determined*"
}
## Done
return(mtgRoom)
}
## Select the date for the reservation
getDesiredDate <- function(data) {
possible <- which(data$Weekday == weekdays(data$minimumPossible + 0:7 * 24 * 60^2))
## Find the day which works
if(length(possible) == 2) {
tmp <- as.POSIXlt(data$minimumPossible)
wantedHour <- as.integer(substr(data$officeHour, 1, 2))
if(wantedHour > tmp$hour) {
possible <- possible[1]
} else if(wantedHour == tmp$hour & as.integer(substr(data$officeHour, 4, 5)) >= tmp$min) {
possible <- possible[1]
} else {
possible <- possible[2]
}
## Construct the desired date
res <- as.POSIXlt(paste(as.Date(data$minimumPossible, tz="America/New_York") + possible - 1, substr(data$officeHour, 1, 5)), "America/New_York")
return(res)
}
load("tapass.Rdata")
load("taemails.Rdata")
load("TAroom.Rdata")
token <- readRDS("droptoken.rds")
## Update calendar
calendarBuild("www/publicCalendar.ics", reservations, TRUE)
library("shiny")
#library("sendmailR")
#library("mail")
library("mygmailR")
library("rdrop2")
## Update calendar
calendarBuild("www/publicCalendar.ics", reservations, TRUE)
## Update TA-individual calendar
calendarBuild(paste0("www/publicCalendar-", new$TA, ".ics"), subset(reservations, TA == new$TA), TRUE)
reservations
reservation
reservations
head(reservations)
View(reservations)
head(reservations)
View(reservations)
reservations$TA
calendarBuild(paste0("www/publicCalendar-", "Daniel", ".ics"), subset(reservations, TA == "Daniel"), TRUE)
calendarBuild(paste0("www/publicCalendar-", "Kayla", ".ics"), subset(reservations, TA == "Kayla"), TRUE)
options(rsconnect.check.certificate = F)
rsconnect::deployApp()
y
