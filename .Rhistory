rooms <- rooms %>% filter(complete.cases(rooms))
rooms <- rooms %>% mutate(date=as.Date(`Start Date`, format="%m/%d/%y"))
rooms <- rooms %>% arrange(date)
tas <- c("Cristiano", "Johns", "Penaloze", "Lee", "Tormohlen")
TAroom <- lapply(tas, function(ta) {
use <- rooms[grepl(ta, rooms$Name), ]
res <- use$Room
names(res) <- as.character(use$date)
return(res)
})
names(TAroom) = c("Stephen", "Jordan", "Daniel", "Hojoon", "Kayla")
TAroom
#rooms <- read_excel("2018 Capstone office hours - 01252018.xlsx")
rooms <- read_excel("report - capstone TA hours revised.xlsx")
rooms
rooms <- rooms %>% filter(complete.cases(rooms))
rooms
rooms %>% filter(grepl("Kayla", Name))
#### 2018
library(readxl)
library(dplyr)
#rooms <- read_excel("2018 Capstone office hours - 01252018.xlsx")
rooms <- read_excel("report - capstone TA hours revised.xlsx")
rooms <- rooms %>% filter(complete.cases(rooms))
rooms <- rooms %>% mutate(date=as.Date(`Start Date`, format="%m/%d/%y"))
rooms <- rooms %>% arrange(date)
tas <- c("Cristiano", "Johns", "Penaloze", "Lee", "Tormohlen")
TAroom <- lapply(tas, function(ta) {
use <- rooms[grepl(ta, rooms$Name), ]
res <- use$Room
names(res) <- as.character(use$date)
return(res)
})
names(TAroom) = c("Stephen", "Jordan", "Daniel", "Hojoon", "Kayla")
save(TAroom, file = "TAroom.Rdata")
shiny::runApp()
#### 2018
library(readxl)
library(dplyr)
#rooms <- read_excel("2018 Capstone office hours - 01252018.xlsx")
rooms <- read_excel("report - capstone TA hours revised.xlsx")
rooms <- rooms %>% filter(complete.cases(rooms))
rooms <- rooms %>% mutate(date=as.Date(`Start Date`, format="%m/%d/%y"))
rooms <- rooms %>% arrange(date)
tas <- c("Cristiano", "Johns", "Penaloze", "Lee", "Tormohlen")
TAroom <- lapply(tas, function(ta) {
use <- rooms[grepl(ta, rooms$Name), ]
res <- use$Room
names(res) <- as.character(use$date)
return(res)
})
names(TAroom) = c("Stephen", "Jordan", "Daniel", "Hojoon", "Kayla")
save(TAroom, file = "TAroom.Rdata")
TAroom
library(shiny)
runApp()
pkgs <- c("devtools", "rJava", "rjson", "RCurl", "XML")
for(pkg in pkgs)
if( !require(pkg, character.only=TRUE) )
install.packages(pkg)
library(devtools)
install_github("trinker/gmailR")
install_github("kbroman/mygmailR")
install.packages("gmailr")
install_github("trinker/gmailR")
install_github("kbroman/mygmailR")
install.packages("rJava")
install_github("trinker/gmailR")
install_github("kbroman/mygmailR")
install.packages("rJava")
install_github("trinker/gmailR")
install_github("kbroman/mygmailR")
library(devtools)
install_github("trinker/gmailR")
install_github("kbroman/mygmailR")
version
install_github("trinker/gmailR")
install_github("kbroman/mygmailR")
library(shiny)
runApp()
install.packages("rdrop2")
library(shiny)
runApp()
library(shiny)
runApp()
library(shiny)
runApp()
# If you wish to save the tokens, for local/remote use
library(rdrop2)
token <- drop_auth()
token
source('~/GitHub/MPHcapstoneTA/setup_shiny.R')
library(shiny)
runApp()
library(shiny)
runApp()
?drop_download
dir("~")
dir("~/..")
dir(file.path("~", "..", "Dropbox", "mphcapstoneta", "www"))
dir(file.path("~", "..", "Dropbox", "mphcapstoneta"))
dir(file.path("~", "..", "Dropbox", "mphcapstoneta", "www"))
getwd()
library(shiny)
runApp()
# To use a stored token provide token location
drop_auth(rdstoken = "droptoken.rds")
source('run.R')
saveRes <- function(reservations, file = 'reservations.Rdata', dest = ".") {
save(reservations, file = file)
drop_upload(file, path = dest, dtoken = token)
}
reservationsHist <- drop_history('github/mphcapstoneta/reservations.rdata', dtoken = token)
save(reservationsHist, file = 'reservationsHist.Rdata')
?drop_history
reservationsHist <- drop_history('./mphcapstoneta/reservations.rdata', limit = 10, dtoken = token)
loadReservationsFunc <- function() {
if(file.exists("reservations.Rdata") & file.exists('reservationsHist.Rdata')) {
load('reservationsHist.Rdata')
## Check if it's the latest version
newHist <- drop_history('github/mphcapstoneta/reservations.rdata', dtoken = token)
if(!identical(newHist, reservationsHist)) {
drop_get("github/MPHcapstoneTA/reservations.Rdata", overwrite = TRUE, dtoken = token)
}
load("reservations.Rdata")
} else {
reservations <- data.frame("TA"=NA, "Weekday"=NA, "officeHour"=NA, "Student"=NA, "Email"=NA, "Distance"=NA, "Skype"=NA, "reservationDate"=Sys.time() -1, "Concentration"=NA, "Description"=NA, "minimumPossible"=as.POSIXlt(Sys.time() -1, "America/New_York"), "desiredDate"=as.POSIXlt(Sys.time() -1, "America/New_York"), stringsAsFactors=FALSE)
saveRes(reservations)
}
reservations$reservationDate <- as.POSIXlt(reservations$reservationDate, "America/New_York")
reservations$minimumPossible <- as.POSIXlt(reservations$minimumPossible, "America/New_York")
#reservations$desiredDate <- as.POSIXlt(reservations$desiredDate, "America/New_York")
reservations
}
saveRes <- function(reservations, file = 'reservations.Rdata', dest = file.path("~", "..", "Dropbox", "mphcapstoneta")) {
save(reservations, file = file)
drop_upload(file, path = dest, dtoken = token)
}
reservationsHist <- drop_history('./mphcapstoneta/reservations.rdata', limit = 10, dtoken = token)
loadReservationsFunc <- function() {
if(file.exists("reservations.Rdata") & file.exists('reservationsHist.Rdata')) {
load('reservationsHist.Rdata')
## Check if it's the latest version
newHist <- drop_history('github/mphcapstoneta/reservations.rdata', dtoken = token)
if(!identical(newHist, reservationsHist)) {
drop_get("github/MPHcapstoneTA/reservations.Rdata", overwrite = TRUE, dtoken = token)
}
load("reservations.Rdata")
} else {
reservations <- data.frame("TA"=NA, "Weekday"=NA, "officeHour"=NA, "Student"=NA, "Email"=NA, "Distance"=NA, "Skype"=NA, "reservationDate"=Sys.time() -1, "Concentration"=NA, "Description"=NA, "minimumPossible"=as.POSIXlt(Sys.time() -1, "America/New_York"), "desiredDate"=as.POSIXlt(Sys.time() -1, "America/New_York"), stringsAsFactors=FALSE)
saveRes(reservations)
}
reservations$reservationDate <- as.POSIXlt(reservations$reservationDate, "America/New_York")
reservations$minimumPossible <- as.POSIXlt(reservations$minimumPossible, "America/New_York")
#reservations$desiredDate <- as.POSIXlt(reservations$desiredDate, "America/New_York")
reservations
}
reservations
loadReservationsFunc()
reservations <- data.frame("TA"=NA, "Weekday"=NA, "officeHour"=NA, "Student"=NA, "Email"=NA, "Distance"=NA, "Skype"=NA, "reservationDate"=Sys.time() -1, "Concentration"=NA, "Description"=NA, "minimumPossible"=as.POSIXlt(Sys.time() -1, "America/New_York"), "desiredDate"=as.POSIXlt(Sys.time() -1, "America/New_York"), stringsAsFactors=FALSE)
saveRes(reservations)
?drop_upload
saveRes <- function(reservations, file = './reservations.Rdata', dest = file.path(".", "mphcapstoneta")) {
save(reservations, file = file)
drop_upload(file, path = dest, dtoken = token)
}
reservations <- data.frame("TA"=NA, "Weekday"=NA, "officeHour"=NA, "Student"=NA, "Email"=NA, "Distance"=NA, "Skype"=NA, "reservationDate"=Sys.time() -1, "Concentration"=NA, "Description"=NA, "minimumPossible"=as.POSIXlt(Sys.time() -1, "America/New_York"), "desiredDate"=as.POSIXlt(Sys.time() -1, "America/New_York"), stringsAsFactors=FALSE)
saveRes(reservations)
reservations
file = './reservations.Rdata'
save(reservations, file = file)
dest = file.path(".", "mphcapstoneta")
drop_upload(file, path = dest, dtoken = token)
drop_auth(rdstoken = "droptoken.rds")
drop_upload(file, path = dest, dtoken = token)
token
dest = file.path("mphcapstoneta")
drop_upload(file, path = dest, dtoken = token)
library(shiny)
runApp()
library(shiny)
runApp()
library(shiny)
runApp()
## Setup
library("shiny")
#library("sendmailR")
#library("mail")
library("mygmailR")
library("rdrop2")
## Load data
source("./setup_shiny.R")
load("tapass.Rdata")
load("taemails.Rdata")
load("TAroom.Rdata")
token <- readRDS("droptoken.rds")
## Options
TAchoices <- list(
"Monday" = c("Choose a TA", "Jordan Johns" = "Jordan", "Daniel Antiporta Penaloza" = "Daniel"),
"Tuesday" = c("Choose a TA", "Jordan Johns" = "Jordan", "Kayla Tormohlen"= "Kayla"),
"Wednesday" = c("Choose a TA",  "Hojoon Lee" = "Hojoon", "Kayla Tormohlen"= "Kayla"),
"Thursday" = c("Choose a TA", "Hojoon Lee" = "Hojoon"),
"Friday" = c("Choose a TA")
)
TAhour <- list(
"Jordan" = list(
"Monday" = c("15:00-15:30", "15:30-16:00", "16:00-16:30", "16:30-17:00"),
"Tuesday" = c("13:00-13:30", "13:30-14:00", "14:00-14:30", "14:30-15:00"),
"Wednesday" ="00:00",
"Thursday" = "00:00",
"Friday" =  "00:00"
),
"Daniel" = list(
"Monday" = c("13:00-13:30, 13:30-14:00", "14:00-14:30", "14:30-15:00", "15:00-15:30", "15:30-16:00", "16:00-16:30", "16:30-17:00"),
"Tuesday" = "00:00",
"Wednesday" = "00:00",
"Thursday" = "00:00",
"Friday" = "00:00"
),
"Hojoon" = list(
"Monday" = "00:00",
"Tuesday" ="00:00",
"Wednesday" =  c("12:00-12:30", "12:30-13:00", "13:00-13:30", "13:30-14:00"),
"Thursday" =  c("15:00-15:30", "15:30-16:00", "16:00-16:30", "16:30-17:00"),
"Friday" = "00:00"
),
"Kayla" = list(
"Monday" = "00:00",
"Tuesday" = c("13:30-14:00", "14:00-14:30", "14:30-15:00", "15:00-15:30"),
"Wednesday" =  c("10:30-11:00","11:00-11:30", "11:30-12:00", "12:00-12:30"),
"Thursday" = "00:00",
"Friday" = "00:00"
),
"Choose a TA" = list("Monday" = "00:00", "Tuesday" = "00:00", "Wednesday" = "00:00", "Thursday" = "00:00", "Friday" = "00:00")
)
## Download latest from Dropbox
# Loaction for my local file paths. If the github directory is on dropbox, this will be the same as dropbx_file_locs
local_drpbx_dir <- file.path("~", "..", "Dropbox", "mphcapstoneta", "www")
# # To use a stored token provide token location
# drop_auth(rdstoken = "droptoken.rds")
# Dropbox online file paths
dropbx_file_locs <- file.path("mphcapstoneta", "www")
drop_download(file.path("mphcapstoneta", "reservations.Rdata"), overwrite = TRUE, dtoken = token)
drop_download(file.path(dropbx_file_locs, "publicCalendar.ics"), local_path = file.path(local_drpbx_dir, "publicCalendar.ics"), overwrite = TRUE, dtoken = token)
drop_download(file.path(dropbx_file_locs, "publicCalendar-Stephen.ics"), local_path = file.path(local_drpbx_dir, "publicCalendar-Stephen.ics"), overwrite = TRUE, dtoken = token)
drop_download(file.path(dropbx_file_locs, "publicCalendar-Jordan.ics"), local_path =  file.path(local_drpbx_dir, "publicCalendar-Jordan.ics"), overwrite = TRUE, dtoken = token)
drop_download(file.path(dropbx_file_locs, "publicCalendar-Hojoon.ics"), local_path = file.path(local_drpbx_dir, "publicCalendar-Hojoon.ics"), overwrite = TRUE, dtoken = token)
drop_download(file.path(dropbx_file_locs, "publicCalendar-Kayla.ics"), local_path = file.path(local_drpbx_dir, "publicCalendar-Kayla.ics"), overwrite = TRUE, dtoken = token)
drop_download(file.path(dropbx_file_locs, "publicCalendar-Daniel.ics"), local_path = file.path(local_drpbx_dir, "publicCalendar-Daniel.ics"), overwrite = TRUE, dtoken = token)
## Save reservations
saveRes <- function(reservations, file = './reservations.Rdata', dest = file.path("mphcapstoneta")) {
save(reservations, file = file)
drop_upload(file, path = dest, dtoken = token)
}
reservationsHist <- drop_history('./mphcapstoneta/reservations.rdata', limit = 10, dtoken = token)
# This is saved to my local directory!
save(reservationsHist, file = 'reservationsHist.Rdata')
assignRoom <- function(TA, desiredDate) {
if(TA %in% names(TAroom)) {
possibleRooms <- TAroom[[TA]]
charDate <- as.character(as.Date(desiredDate, tz="America/New_York"))
if(charDate %in% names(possibleRooms)) {
mtgRoom <- possibleRooms[[charDate]]
} else {
mtgRoom <- "*to be determined*"
}
} else {
mtgRoom <- "*to be determined*"
}
## Done
return(mtgRoom)
}
assignRoom <- function(TA, desiredDate) {
if(TA %in% names(TAroom)) {
possibleRooms <- TAroom[[TA]]
charDate <- as.character(as.Date(desiredDate, tz="America/New_York"))
if(charDate %in% names(possibleRooms)) {
mtgRoom <- possibleRooms[[charDate]]
} else {
mtgRoom <- "*to be determined*"
}
} else {
mtgRoom <- "*to be determined*"
}
## Done
return(mtgRoom)
}
getDesiredDate <- function(data) {
possible <- which(data$Weekday == weekdays(data$minimumPossible + 0:7 * 24 * 60^2))
## Find the day which works
if(length(possible) == 2) {
tmp <- as.POSIXlt(data$minimumPossible)
wantedHour <- as.integer(substr(data$officeHour, 1, 2))
if(wantedHour > tmp$hour) {
possible <- possible[1]
} else if(wantedHour == tmp$hour & as.integer(substr(data$officeHour, 4, 5)) >= tmp$min) {
possible <- possible[1]
} else {
possible <- possible[2]
}
## Construct the desired date
res <- as.POSIXlt(paste(as.Date(data$minimumPossible, tz="America/New_York") + possible - 1, substr(data$officeHour, 1, 5)), "America/New_York")
return(res)
}
buildMsg <- function(new, tentative="*tentative* ") {
tmpSkype <- paste0(c(" (skype ID: ", new$Skype, ")"), collapse="")
## Assign room
mtgRoom <- assignRoom(new$TA, new$desiredDate)
## Construct the message
msg <- paste0(c(
"Dear ", new$Student, ", your ", tentative, "office hour reservation is with TA ", new$TA, " on ", as.character(as.Date(new$desiredDate, tz="America/New_York")), " at ", new$officeHour, ". You have specified that your email is ", new$Email, ". Furthermore, you are ", ifelse(new$Distance == "No", "not ", ""), "a distance student", ifelse(new$Distance == "Yes", tmpSkype, ""), ", and your MPH concentration is <", new$Concentration, ">.\n The meeting will be at ", mtgRoom, "."
), collapse="")
return(msg)
}
## Check that the entry is valid
checkEntry <- function(new, reservations, verbose=TRUE) {
res <- "Incomplete"
if(new$TA == "Choose a TA") {
if(verbose) cat("Guide: Please choose a TA\n")
} else if(new$Student == "Your name") {
if(verbose) cat("Guide: Please enter your name.\n")
} else if (new$Email == "Your email") {
if(verbose) cat("Guide: Please enter your email.\n")
} else if (!grepl('@', new$Email)) {
if(verbose) cat("Guide: Please enter a valid email address")
} else if (new$officeHour == "00:00"){
if(verbose) cat("Guide: Please choose a valid office hour.\n")
} else if (new$Distance == "Yes" & new$Skype == "") {
if(verbose) cat("Guide: Please provide us your Skype username.\n")
} else if (new$Concentration == "Choose your concentration") {
if(verbose) cat("Guide: Please choose your MPH concentration.\n")
} else {
## Does the reservation already exist? Cancelling?
pre <- subset(reservations, TA == new$TA & tolower(Student) == tolower(new$Student) & tolower(Email) == tolower(new$Email) & Distance == new$Distance & tolower(Skype) == tolower(new$Skype) & Concentration == new$Concentration & desiredDate == new$desiredDate)
## Is there an overlap? Someone reserved the slot already?
ov <- subset(reservations, TA == new$TA & desiredDate == new$desiredDate)
## Do you already have a reservation?
gotone <- subset(reservations, tolower(Student) == tolower(new$Student) & tolower(Email) == tolower(new$Email) & Distance == new$Distance & tolower(Skype) == tolower(new$Skype) & Concentration == new$Concentration & desiredDate >= new$reservationDate)
if (nrow(ov) > 0 & nrow(pre) ==  0) {
if(verbose) cat("Guide: Someone else already reserved the slot you are interested in. Please choose a different time.\n")
res <- "Invalid"
} else if(nrow(pre) > 0) {
if(verbose) cat("Guide: If you want to cancel your reservation, you may now do so by choosing the appropriate action.\n")
res <- "Can cancel"
} else if (nrow(gotone) > 0){
if(verbose) cat("Guide: You already have a scheduled office hour and thus cannot make a second reservation. Please come back after your office hour.\n")
res <- "Invalid"
} else if (new$Description == "Fill out" | nchar(new$Description) < 20) {
if(verbose) cat("Guide: Please describe your problem. The description has to be at least 20 characters long.\n")
} else {
if(verbose) cat("Guide: You may now proceed to submitting your reservation.\n")
res <- "Complete"
}
return(res)
}
## Construct dates for the calendar
constructDate <- function(x) {
y <- as.POSIXlt(x)
year <- as.character(y$year + 1900)
tmp <- as.character(y$mon + 1)
mon <- ifelse(nchar(tmp) == 1, paste0(c("0", tmp), collapse=""), tmp)
tmp <- as.character(y$mday)
mday <- ifelse(nchar(tmp) == 1, paste0(c("0", tmp), collapse=""), tmp)
tmp <- as.character(y$hour)
hour <- ifelse(nchar(tmp) == 1, paste0(c("0", tmp), collapse=""), tmp)
tmp <- as.character(y$min)
minute <- ifelse(nchar(tmp) == 1, paste0(c("0", tmp), collapse=""), tmp)
paste0(year, mon, mday, "T", hour, minute, "00")
}
## Build calendar
calendarBuild <- function(file, reservations, public=TRUE) {
reservations <- reservations[!is.na(reservations$TA), ]
sink(file)
cat("BEGIN:VCALENDAR\n")
cat("VERSION:2.0\n")
cat("PRODID:-//JHSPH//MPHcapstone//EN\n")
for (i in seq_len(nrow(reservations))) {
stamp <- constructDate(reservations$reservationDate[i])
start <- constructDate(reservations$desiredDate[i])
end <- constructDate(reservations$desiredDate[i] + 30 * 60)
cat("BEGIN:VEVENT\n")
if(public) {
cat(paste("SUMMARY: TA", reservations$TA[i], "Student", reservations$Student[i], "Location", assignRoom(reservations$TA[i], reservations$desiredDate[i]), "\n", sep=" "))
} else {
cat(paste("SUMMARY:", reservations$Student[i], reservations$Email[i], reservations$Skype[i], reservations$Concentration[i], assignRoom(reservations$TA[i], reservations$desiredDate[i]), "\n", sep=" "))
}
cat(paste0("DTSTAMP:", stamp, "\n"))
cat(paste0("DTSTART;TZID=US/Eastern:", start, "\n"))
cat(paste0("DTEND;TZID=US/Eastern:", end, "\n"))
cat("END:VEVENT\n")
}
cat("END:VCALENDAR")
cat("\n")
sink()
drop_upload(file, path = "github/MPHcapstoneTA/www", dtoken = token)
}
buildEmail <- function(new, action="confirm", verbose=TRUE, email=TRUE) {
tentative <- ifelse(action == "confirm", "*confirmed* ", "*cancelled* ")
msg <- buildMsg(new, tentative)
msg <- paste0(msg, "\n\nProblem description:\n", new$Description)
if(action=="confirm") {
msgStudent <- paste0(msg, "\n\nIf for some reason you need to cancel your reservation (minimum 24 hrs notice), please do so through https://scristia.shinyapps.io/MPHcapstoneTA/. You will have to choose the TA, office hour, enter your name, email and MPH concentration (to verify your identity) in order to cancel.")
subject <- paste("New TA reservation:", as.character(as.Date(new$desiredDate, tz="America/New_York")), "at", new$officeHour)
} else {
subject <- paste("Cancelled TA reservation:", as.character(as.Date(new$desiredDate, tz="America/New_York")), "at", new$officeHour)
msgStudent <- paste0(msg, "\n\n Hopefully everything is ok. Please try to minimize as much as the number of times you have to cancel a TA office hour reservation.")
}
if(email) {
msg <- paste0("Reservation details\n-------------------------------\n\n", msg, "\n\n-------------------------------\nPlease do not reply to this email address as no one is checking it.")
} else {
msg <- paste0("Reservation details\n-------------------------------\n\n", msg, "\n\n-------------------------------\n\n")
}
# msgStudent <- paste0(msgStudent, "\n\n-------------------------------\nPlease do not reply to this email address as no one is checking it.")
## Send emails
#	cat(taemails$email[taemails$ta == new$TA])
#	cat(msg)
#	cat(paste0("<", new$Email, ">"))
if(verbose) {
cat("\n\n")
cat(msgStudent)
}
res <- list(to=taemails$email[taemails$ta == new$TA], subject=subject, msg=msg, from = NA)
return(res)
}
## S
confirmEmail <- function(from, to, subject, msg) {
## will not work unless address is @gmail.com
#	sendmail(from, to=paste0("<", new$Email, ">"), subject=subject, msg=msgStudent, control=list(smtpServer="ASPMX.L.GOOGLE.COM"))
#	from <- sprintf("<mphcapstoneta@gmail.com>")
## Currently not working (2015-01-20) with sendmailR
#sendmail(from, to=to, subject=subject, msg=msg, control=list(smtpServer="ASPMX.L.GOOGLE.COM"))
#    mail::sendmail(recipient = to, subject = subject, message = msg)
msg <- gsub("\n", "\\\\n", msg)
msg <- gsub("\"|'", "*", msg)
## works locally but not from deployed app.
## Looks to be issue with Google's security measures
##send_gmail(subject = subject, body = msg, to = as.character(to), dir_private = ".")
return("\n")
}
loadReservationsFunc <- function() {
if(file.exists("reservations.Rdata") & file.exists('reservationsHist.Rdata')) {
load('reservationsHist.Rdata')
## Check if it's the latest version
newHist <- drop_history('github/mphcapstoneta/reservations.rdata', dtoken = token)
if(!identical(newHist, reservationsHist)) {
drop_get("github/MPHcapstoneTA/reservations.Rdata", overwrite = TRUE, dtoken = token)
}
load("reservations.Rdata")
} else {
reservations <- data.frame("TA"=NA, "Weekday"=NA, "officeHour"=NA, "Student"=NA, "Email"=NA, "Distance"=NA, "Skype"=NA, "reservationDate"=Sys.time() -1, "Concentration"=NA, "Description"=NA, "minimumPossible"=as.POSIXlt(Sys.time() -1, "America/New_York"), "desiredDate"=as.POSIXlt(Sys.time() -1, "America/New_York"), stringsAsFactors=FALSE)
saveRes(reservations)
}
reservations$reservationDate <- as.POSIXlt(reservations$reservationDate, "America/New_York")
reservations$minimumPossible <- as.POSIXlt(reservations$minimumPossible, "America/New_York")
#reservations$desiredDate <- as.POSIXlt(reservations$desiredDate, "America/New_York")
reservations
}
library(shiny)
runApp()
?drop_history
library(shiny)
runApp()
dropbox_reservation_file
dropbox_reservation_file <- file.path('mphcapstoneta', 'reservations.rdata')
?drop_get
?drop_download
library(shiny)
runApp()
install.packages("shinythemes")
?shinyUI
install.packages("shinythemes")
library(shinythemes)
?fluidPage()
library(shiny)
runApp()
library(shiny)
runApp()
library(shiny)
runApp()
library(shiny)
runApp()
library(shiny)
runApp()
library(shiny)
runApp()
library(shiny)
runApp()
library(shiny)
runApp()
library(shiny)
runApp()
library(shiny)
runApp()
install.packages('rsconnect')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='kayode-sosina',
token='F50FFD47EC2BFF1DA5392723D6238335',
secret='<SECRET>')
rsconnect::setAccountInfo(name='kayode-sosina',
token='F50FFD47EC2BFF1DA5392723D6238335',
secret='<SECRET>')
rsconnect::setAccountInfo(name='kayode-sosina',
token='F50FFD47EC2BFF1DA5392723D6238335',
secret='Uoi9O1D7vqWmztiVWHtmTQBSgw6tNu+L+DsSD7rT')
library(rsconnect)
getwd()
list.files()
?rsconnect::deployApp
rsconnect::deployApp()
library(shiny)
runApp()
source('run.R')
