if(verbose) cat("Guide: Someone else already reserved the slot you are interested in. Please choose a different time.\n")
res <- "Invalid"
} else if(nrow(pre) > 0) {
if(verbose) cat("Guide: If you want to cancel your reservation, you may now do so by choosing the appropriate action.\n")
res <- "Can cancel"
} else if (nrow(gotone) > 0){
if(verbose) cat("Guide: You already have a scheduled office hour and thus cannot make a second reservation. Please come back after your office hour.\n")
res <- "Invalid"
} else if (new$Description == "Fill out" | nchar(new$Description) < 20) {
if(verbose) cat("Guide: Please describe your problem. The description has to be at least 20 characters long.\n")
} else {
if(verbose) cat("Guide: You may now proceed to submitting your reservation.\n")
res <- "Complete"
}
return(res)
}
## Construct dates for the calendar
constructDate <- function(x) {
y <- as.POSIXlt(x)
year <- as.character(y$year + 1900)
tmp <- as.character(y$mon + 1)
mon <- ifelse(nchar(tmp) == 1, paste0(c("0", tmp), collapse=""), tmp)
tmp <- as.character(y$mday)
mday <- ifelse(nchar(tmp) == 1, paste0(c("0", tmp), collapse=""), tmp)
tmp <- as.character(y$hour)
hour <- ifelse(nchar(tmp) == 1, paste0(c("0", tmp), collapse=""), tmp)
tmp <- as.character(y$min)
minute <- ifelse(nchar(tmp) == 1, paste0(c("0", tmp), collapse=""), tmp)
paste0(year, mon, mday, "T", hour, minute, "00")
}
## Build calendar
calendarBuild <- function(file, reservations, public=TRUE) {
reservations <- reservations[!is.na(reservations$TA), ]
sink(file)
cat("BEGIN:VCALENDAR\n")
cat("VERSION:2.0\n")
cat("PRODID:-//JHSPH//MPHcapstone//EN\n")
for (i in seq_len(nrow(reservations))) {
stamp <- constructDate(reservations$reservationDate[i])
start <- constructDate(reservations$desiredDate[i])
end <- constructDate(reservations$desiredDate[i] + 30 * 60)
cat("BEGIN:VEVENT\n")
if(public) {
cat(paste("SUMMARY: TA", reservations$TA[i], "Student", reservations$Student[i], "Location", assignRoom(reservations$TA[i], reservations$desiredDate[i]), "\n", sep=" "))
} else {
cat(paste("SUMMARY:", reservations$Student[i], reservations$Email[i], reservations$Skype[i], reservations$Concentration[i], assignRoom(reservations$TA[i], reservations$desiredDate[i]), "\n", sep=" "))
}
cat(paste0("DTSTAMP:", stamp, "\n"))
cat(paste0("DTSTART;TZID=US/Eastern:", start, "\n"))
cat(paste0("DTEND;TZID=US/Eastern:", end, "\n"))
cat("END:VEVENT\n")
}
cat("END:VCALENDAR")
cat("\n")
sink()
drop_upload(file, path = "github/MPHcapstoneTA/www", dtoken = token)
}
buildEmail <- function(new, action="confirm", verbose=TRUE, email=TRUE) {
tentative <- ifelse(action == "confirm", "*confirmed* ", "*cancelled* ")
msg <- buildMsg(new, tentative)
msg <- paste0(msg, "\n\nProblem description:\n", new$Description)
if(action=="confirm") {
msgStudent <- paste0(msg, "\n\nIf for some reason you need to cancel your reservation (minimum 24 hrs notice), please do so through https://scristia.shinyapps.io/MPHcapstoneTA/. You will have to choose the TA, office hour, enter your name, email and MPH concentration (to verify your identity) in order to cancel.")
subject <- paste("New TA reservation:", as.character(as.Date(new$desiredDate, tz="America/New_York")), "at", new$officeHour)
} else {
subject <- paste("Cancelled TA reservation:", as.character(as.Date(new$desiredDate, tz="America/New_York")), "at", new$officeHour)
msgStudent <- paste0(msg, "\n\n Hopefully everything is ok. Please try to minimize as much as the number of times you have to cancel a TA office hour reservation.")
}
if(email) {
msg <- paste0("Reservation details\n-------------------------------\n\n", msg, "\n\n-------------------------------\nPlease do not reply to this email address as no one is checking it.")
} else {
msg <- paste0("Reservation details\n-------------------------------\n\n", msg, "\n\n-------------------------------\n\n")
}
# msgStudent <- paste0(msgStudent, "\n\n-------------------------------\nPlease do not reply to this email address as no one is checking it.")
## Send emails
#	cat(taemails$email[taemails$ta == new$TA])
#	cat(msg)
#	cat(paste0("<", new$Email, ">"))
if(verbose) {
cat("\n\n")
cat(msgStudent)
}
res <- list(to=taemails$email[taemails$ta == new$TA], subject=subject, msg=msg, from = NA)
return(res)
}
## S
confirmEmail <- function(from, to, subject, msg) {
## will not work unless address is @gmail.com
#	sendmail(from, to=paste0("<", new$Email, ">"), subject=subject, msg=msgStudent, control=list(smtpServer="ASPMX.L.GOOGLE.COM"))
#	from <- sprintf("<mphcapstoneta@gmail.com>")
## Currently not working (2015-01-20) with sendmailR
#sendmail(from, to=to, subject=subject, msg=msg, control=list(smtpServer="ASPMX.L.GOOGLE.COM"))
#    mail::sendmail(recipient = to, subject = subject, message = msg)
msg <- gsub("\n", "\\\\n", msg)
msg <- gsub("\"|'", "*", msg)
## works locally but not from deployed app.
## Looks to be issue with Google's security measures
##send_gmail(subject = subject, body = msg, to = as.character(to), dir_private = ".")
return("\n")
}
loadReservationsFunc <- function() {
if(file.exists("reservations.Rdata") & file.exists('reservationsHist.Rdata')) {
load('reservationsHist.Rdata')
## Check if it's the latest version
newHist <- drop_history('github/mphcapstoneta/reservations.rdata', dtoken = token)
if(!identical(newHist, reservationsHist)) {
drop_get("github/MPHcapstoneTA/reservations.Rdata", overwrite = TRUE, dtoken = token)
}
load("reservations.Rdata")
} else {
reservations <- data.frame("TA"=NA, "Weekday"=NA, "officeHour"=NA, "Student"=NA, "Email"=NA, "Distance"=NA, "Skype"=NA, "reservationDate"=Sys.time() -1, "Concentration"=NA, "Description"=NA, "minimumPossible"=as.POSIXlt(Sys.time() -1, "America/New_York"), "desiredDate"=as.POSIXlt(Sys.time() -1, "America/New_York"), stringsAsFactors=FALSE)
saveRes(reservations)
}
reservations$reservationDate <- as.POSIXlt(reservations$reservationDate, "America/New_York")
reservations$minimumPossible <- as.POSIXlt(reservations$minimumPossible, "America/New_York")
#reservations$desiredDate <- as.POSIXlt(reservations$desiredDate, "America/New_York")
reservations
}
library(shiny)
runApp()
?drop_history
library(shiny)
runApp()
dropbox_reservation_file
dropbox_reservation_file <- file.path('mphcapstoneta', 'reservations.rdata')
?drop_get
?drop_download
library(shiny)
runApp()
install.packages("shinythemes")
?shinyUI
install.packages("shinythemes")
library(shinythemes)
?fluidPage()
library(shiny)
runApp()
library(shiny)
runApp()
library(shiny)
runApp()
library(shiny)
runApp()
library(shiny)
runApp()
library(shiny)
runApp()
library(shiny)
runApp()
library(shiny)
runApp()
library(shiny)
runApp()
library(shiny)
runApp()
install.packages('rsconnect')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='kayode-sosina',
token='F50FFD47EC2BFF1DA5392723D6238335',
secret='<SECRET>')
rsconnect::setAccountInfo(name='kayode-sosina',
token='F50FFD47EC2BFF1DA5392723D6238335',
secret='<SECRET>')
rsconnect::setAccountInfo(name='kayode-sosina',
token='F50FFD47EC2BFF1DA5392723D6238335',
secret='Uoi9O1D7vqWmztiVWHtmTQBSgw6tNu+L+DsSD7rT')
library(rsconnect)
getwd()
list.files()
?rsconnect::deployApp
rsconnect::deployApp()
library(shiny)
runApp()
source('run.R')
dir("../..")
library(shiny)
runApp()
rsconnect::deployApp()
getwd()
dir()
?drop_upload
library(shiny)
runApp()
library("shiny")
#library("sendmailR")
#library("mail")
library("mygmailR")
library("rdrop2")
## Load data
source("./setup_shiny.R")
load("tapass.Rdata")
load("taemails.Rdata")
load("TAroom.Rdata")
token <- readRDS("droptoken.rds")
## Options
TAchoices <- list(
"Monday" = c("Choose a TA", "Jordan Johns" = "Jordan", "Daniel Antiporta Penaloza" = "Daniel"),
"Tuesday" = c("Choose a TA", "Jordan Johns" = "Jordan", "Kayla Tormohlen"= "Kayla"),
"Wednesday" = c("Choose a TA",  "Hojoon Lee" = "Hojoon", "Kayla Tormohlen"= "Kayla"),
"Thursday" = c("Choose a TA", "Hojoon Lee" = "Hojoon"),
"Friday" = c("Choose a TA")
)
TAhour <- list(
"Jordan" = list(
"Monday" = c("15:00-15:30", "15:30-16:00", "16:00-16:30", "16:30-17:00"),
"Tuesday" = c("13:00-13:30", "13:30-14:00", "14:00-14:30", "14:30-15:00"),
"Wednesday" ="00:00",
"Thursday" = "00:00",
"Friday" =  "00:00"
),
"Daniel" = list(
"Monday" = c("13:00-13:30, 13:30-14:00", "14:00-14:30", "14:30-15:00", "15:00-15:30", "15:30-16:00", "16:00-16:30", "16:30-17:00"),
"Tuesday" = "00:00",
"Wednesday" = "00:00",
"Thursday" = "00:00",
"Friday" = "00:00"
),
"Hojoon" = list(
"Monday" = "00:00",
"Tuesday" ="00:00",
"Wednesday" =  c("12:00-12:30", "12:30-13:00", "13:00-13:30", "13:30-14:00"),
"Thursday" =  c("15:00-15:30", "15:30-16:00", "16:00-16:30", "16:30-17:00"),
"Friday" = "00:00"
),
"Kayla" = list(
"Monday" = "00:00",
"Tuesday" = c("13:30-14:00", "14:00-14:30", "14:30-15:00", "15:00-15:30"),
"Wednesday" =  c("10:30-11:00","11:00-11:30", "11:30-12:00", "12:00-12:30"),
"Thursday" = "00:00",
"Friday" = "00:00"
),
"Choose a TA" = list("Monday" = "00:00", "Tuesday" = "00:00", "Wednesday" = "00:00", "Thursday" = "00:00", "Friday" = "00:00")
)
## Download latest from Dropbox
# Loaction for my local file paths. If the github directory is on dropbox, this will be the same as dropbx_file_locs
local_drpbx_dir <- file.path(".", "mphcapstoneta", "www")
# # To use a stored token provide token location
# drop_auth(rdstoken = "droptoken.rds")
# Dropbox online file paths
dropbx_file_locs <- file.path("GitHub", "MPHcapstoneTA", "mphcapstoneta", "www")
drop_download(file.path("mphcapstoneta", "reservations.Rdata"), overwrite = TRUE, dtoken = token)
drop_download(file.path(dropbx_file_locs, "publicCalendar.ics"), local_path = file.path(local_drpbx_dir, "publicCalendar.ics"), overwrite = TRUE, dtoken = token)
drop_download(file.path(dropbx_file_locs, "publicCalendar-Stephen.ics"), local_path = file.path(local_drpbx_dir, "publicCalendar-Stephen.ics"), overwrite = TRUE, dtoken = token)
drop_download(file.path(dropbx_file_locs, "publicCalendar-Jordan.ics"), local_path =  file.path(local_drpbx_dir, "publicCalendar-Jordan.ics"), overwrite = TRUE, dtoken = token)
drop_download(file.path(dropbx_file_locs, "publicCalendar-Hojoon.ics"), local_path = file.path(local_drpbx_dir, "publicCalendar-Hojoon.ics"), overwrite = TRUE, dtoken = token)
drop_download(file.path(dropbx_file_locs, "publicCalendar-Kayla.ics"), local_path = file.path(local_drpbx_dir, "publicCalendar-Kayla.ics"), overwrite = TRUE, dtoken = token)
drop_download(file.path(dropbx_file_locs, "publicCalendar-Daniel.ics"), local_path = file.path(local_drpbx_dir, "publicCalendar-Daniel.ics"), overwrite = TRUE, dtoken = token)
drop_download(file.path("GitHub", "MPHcapstoneTA", "mphcapstoneta", "reservations.Rdata"), overwrite = TRUE, dtoken = token)
drop_download(file.path(dropbx_file_locs, "publicCalendar.ics"), local_path = file.path(local_drpbx_dir, "publicCalendar.ics"), overwrite = TRUE, dtoken = token)
drop_download(file.path(dropbx_file_locs, "publicCalendar-Stephen.ics"), local_path = file.path(local_drpbx_dir, "publicCalendar-Stephen.ics"), overwrite = TRUE, dtoken = token)
drop_download(file.path(dropbx_file_locs, "publicCalendar-Jordan.ics"), local_path =  file.path(local_drpbx_dir, "publicCalendar-Jordan.ics"), overwrite = TRUE, dtoken = token)
drop_download(file.path(dropbx_file_locs, "publicCalendar-Hojoon.ics"), local_path = file.path(local_drpbx_dir, "publicCalendar-Hojoon.ics"), overwrite = TRUE, dtoken = token)
drop_download(file.path(dropbx_file_locs, "publicCalendar-Kayla.ics"), local_path = file.path(local_drpbx_dir, "publicCalendar-Kayla.ics"), overwrite = TRUE, dtoken = token)
drop_download(file.path(dropbx_file_locs, "publicCalendar-Daniel.ics"), local_path = file.path(local_drpbx_dir, "publicCalendar-Daniel.ics"), overwrite = TRUE, dtoken = token)
library(shiny)
runApp()
rsconnect::deployApp()
library(shiny)
runApp()
rsconnect::deployApp()
library(shiny)
runApp()
library(shiny)
runApp()
library(shiny)
runApp()
library(shiny)
runApp()
rsconnect::deployApp()
?selectInput
?textInput
?verbatimTextOutput
library(shinythemes)
?fluidpage
library(shiny)
?fluidpage
shinythemes::shinytheme()
?shinythemes::shinytheme()
rsconnect::deployApp()
??curl
req <- curl_fetch_memory("https://httpbin.org/get")
str(req)
req <- curl::curl_fetch_memory("https://httpbin.org/get")
str(req)
rsconnect::deployApp()
rsconnect::setAccountInfo(name='mphcapstoneta',
token='F50FFD47EC2BFF1DA5392723D6238335',
secret='Uoi9O1D7vqWmztiVWHtmTQBSgw6tNu+L+DsSD7rT')
rsconnect.check.certificate
?rsconnect.check.certificate
??rsconnect.check.certificate
library(rsconnect.check.certificate)
library(rsconnect)
options(rsconnect.check.certificate = F)
rsconnect::setAccountInfo(name='mphcapstoneta',
token='F50FFD47EC2BFF1DA5392723D6238335',
secret='Uoi9O1D7vqWmztiVWHtmTQBSgw6tNu+L+DsSD7rT')
deployApp()
options(rsconnect.check.certificate = T)
library(readxl)
library(dplyr)
#rooms <- read_excel("report - MPH Capstone TA office hours - revised.xlsx")
rooms <- read_excel("report - MPH Capstone TA office hours - revised.xlsx")
rooms <- rooms %>% filter(complete.cases(rooms))
rooms <- rooms %>% mutate(date=as.Date(`Start Date`, format="%m/%d/%y"))
rooms <- rooms %>% arrange(date)
tas <- c("Kundu", "Sosina", "Antiporta", "Lee", "Tormohlen", "Baker")
TAroom <- lapply(tas, function(ta) {
use <- rooms[grepl(ta, rooms$Name), ]
res <- use$Room
names(res) <- as.character(use$date)
return(res)
})
names(TAroom) = c("Prosenjit", "Kayode", "Daniel", "Hojoon", "Kayla", "Kellan")
save(TAroom, file = "TAroom.Rdata")
library(shiny)
runApp()
load("TAroom.Rdata")
TAroom
assignRoom <- function(TA, desiredDate) {
if(TA %in% names(TAroom)) {
possibleRooms <- TAroom[[TA]]
charDate <- as.character(as.Date(desiredDate, tz="America/New_York"))
if(charDate %in% names(possibleRooms)) {
mtgRoom <- possibleRooms[[charDate]]
} else {
mtgRoom <- "*to be determined*"
}
} else {
mtgRoom <- "*to be determined*"
}
## Done
return(mtgRoom)
}
assignRoom("Kayode")
assignRoom("Kayode", "02-05-2018")
names(TAroom
)
library(shiny)
runApp()
TAroom
assignRoom("Kayode", "2020-01-29")
?as.Date
rooms <- read_excel("report - MPH Capstone TA office hours - revised.xlsx")
rooms <- rooms %>% filter(complete.cases(rooms))
rooms %>% mutate(date=as.Date(`Start Date`, format="%m/%d/%y", tz="America/New_York"))
rooms %>% mutate(date=as.Date(`Start Date`, format="%m/%d/%y"))
rooms <- read_excel("report - MPH Capstone TA office hours - revised.xlsx")
rooms <- rooms %>% filter(complete.cases(rooms))
rooms <- rooms %>% mutate(date=as.Date(`Start Date`, format="%m/%d/%y", tz="America/New_York"))
rooms <- rooms %>% arrange(date)
tas <- c("Kundu", "Sosina", "Antiporta", "Lee", "Tormohlen", "Baker")
TAroom <- lapply(tas, function(ta) {
use <- rooms[grepl(ta, rooms$Name), ]
res <- use$Room
names(res) <- as.character(use$date)
return(res)
})
TAroom
use$date
rooms$date
rooms %>% mutate(date=as.Date(`Start Date`, format="%m/%d/%y", tz="America/New_York"))
?Date
?as.Date
rooms <- read_excel("report - MPH Capstone TA office hours - revised.xlsx")
rooms <- rooms %>% filter(complete.cases(rooms))
rooms
rooms <- read_excel("report - MPH Capstone TA office hours - revised.xlsx")
rooms <- rooms %>% filter(complete.cases(rooms))
rooms <- rooms %>% mutate(date=as.Date(`Start Date`, format="%m/%d/%y", tz="America/New_York"))
rooms <- rooms %>% arrange(date)
tas <- c("Kundu", "Sosina", "Antiporta", "Lee", "Tormohlen", "Baker")
TAroom <- lapply(tas, function(ta) {
use <- rooms[grepl(ta, rooms$Name), ]
res <- use$Room
names(res) <- as.character(use$date)
return(res)
})
names(TAroom) = c("Prosenjit", "Kayode", "Daniel", "Hojoon", "Kayla", "Kellan")
save(TAroom, file = "TAroom.Rdata")
assignRoom("Kayode", "2020-01-29")
assignRoom("Kayode", "01-29-2020")
rooms %>% mutate(date=as.Date(`Start Date`, tz="America/New_York"))
rooms <- read_excel("report - MPH Capstone TA office hours - revised.xlsx")
rooms <- rooms %>% filter(complete.cases(rooms))
rooms %>% mutate(date=as.Date(`Start Date`, tz="America/New_York"))
rooms %>% mutate(date=as.Date(`Start Date`, format="%m/%d/%y"))
rooms %>% mutate(date=as.Date(`Start Date`, format="%m/%d/%y", tz="America/New_York"))
as.Date("2/6/2019", format="%m/%d/%y", tz="America/New_York")
as.Date("2/6/2019", format="%m/%d/%y")
dates <- c("02/27/92", "02/27/92", "01/14/92", "02/28/92", "02/01/92")
as.Date(dates, "%m/%d/%y")
?strptime
rooms <- rooms %>% mutate(date=as.Date(`Start Date`, format="%m/%d/%Y", tz="America/New_York"))
rooms
rooms <- read_excel("report - MPH Capstone TA office hours - revised.xlsx")
rooms <- rooms %>% filter(complete.cases(rooms))
rooms <- rooms %>% mutate(date=as.Date(`Start Date`, format="%m/%d/%Y", tz="America/New_York"))
rooms <- rooms %>% arrange(date)
tas <- c("Kundu", "Sosina", "Antiporta", "Lee", "Tormohlen", "Baker")
TAroom <- lapply(tas, function(ta) {
use <- rooms[grepl(ta, rooms$Name), ]
res <- use$Room
names(res) <- as.character(use$date)
return(res)
})
names(TAroom) = c("Prosenjit", "Kayode", "Daniel", "Hojoon", "Kayla", "Kellan")
save(TAroom, file = "TAroom.Rdata")
library(shiny)
runApp()
rsconnect::deployApp()
options(rsconnect.check.certificate = F)
rsconnect::deployApp()
options(rsconnect.check.certificate = T)
rooms <- read_excel("report - MPH Capstone TA office hours - revised.xlsx")
rooms <- rooms %>% filter(complete.cases(rooms))
rooms <- rooms %>% mutate(date=as.Date(`Start Date`, format="%m/%d/%Y", tz="America/New_York"))
rooms <- rooms %>% arrange(date)
tas <- c("Kundu", "Sosina", "Antiporta", "Lee", "Tormohlen", "Baker")
TAroom <- lapply(tas, function(ta) {
use <- rooms[grepl(ta, rooms$Name), ]
res <- use$Room
names(res) <- as.character(use$date)
return(res)
})
names(TAroom) = c("Prosenjit", "Kayode", "Daniel", "Hojoon", "Kayla", "Kellan")
save(TAroom, file = "TAroom.Rdata")
options(rsconnect.check.certificate = F)
rsconnect::deployApp()
TAroom
rooms <- read_excel("report - MPH Capstone TA office hours - revised.xlsx")
rooms <- rooms %>% filter(complete.cases(rooms))
rooms <- rooms %>% mutate(date=as.Date(`Start Date`, format="%m/%d/%Y", tz="America/New_York"))
rooms <- rooms %>% arrange(date)
rooms
tas <- c("Kundu", "Sosina", "Antiporta", "Lee", "Tormohlen", "Baker")
TAroom <- lapply(tas, function(ta) {
use <- rooms[grepl(ta, rooms$Name), ]
res <- use$Room
names(res) <- as.character(use$date)
return(res)
})
names(TAroom) = c("Prosenjit", "Kayode", "Daniel", "Hojoon", "Kayla", "Kellan")
TAroom
#rooms <- read_excel("report - MPH Capstone TA office hours - revised.xlsx")
rooms <- read_excel("report - MPH Capstone TA office hours - revised.xlsx")
rooms <- rooms %>% filter(complete.cases(rooms))
rooms <- rooms %>% mutate(date=as.Date(`Start Date`, format="%m/%d/%Y", tz="America/New_York"))
rooms <- rooms %>% arrange(date)
tas <- c("Kundu", "Sosina", "Antiporta", "Lee", "Tormohlen", "Baker")
TAroom <- lapply(tas, function(ta) {
use <- rooms[grepl(ta, rooms$Name), ]
res <- use$Room
names(res) <- as.character(use$date)
return(res)
})
names(TAroom) = c("Prosenjit", "Kayode", "Daniel", "Hojoon", "Kayla", "Kellan")
save(TAroom, file = "TAroom.Rdata")
TAroom
rooms <- read_excel("report - MPH Capstone TA office hours - revised.xlsx")
rooms <- rooms %>% filter(complete.cases(rooms))
rooms <- rooms %>% mutate(date=as.Date(`Start Date`, format="%m/%d/%Y", tz="America/New_York"))
rooms <- rooms %>% arrange(date)
tas <- c("Kundu", "Sosina", "Antiporta", "Lee", "Tormohlen", "Baker")
TAroom <- lapply(tas, function(ta) {
use <- rooms[grepl(ta, rooms$Name), ]
res <- use$Room
names(res) <- as.character(use$date)
return(res)
})
names(TAroom) = c("Prosenjit", "Kayode", "Daniel", "Hojoon", "Kayla", "Kellan")
save(TAroom, file = "TAroom.Rdata")
TAroom
#rooms <- read_excel("report - MPH Capstone TA office hours - revised.xlsx")
rooms <- read_excel("report - MPH Capstone TA office hours - revised.xlsx")
rooms <- rooms %>% filter(complete.cases(rooms))
rooms <- rooms %>% mutate(date=as.Date(`Start Date`, format="%m/%d/%Y", tz="America/New_York"))
rooms <- rooms %>% arrange(date)
rooms[grepl("Antiporta", rooms$Name), ]
data.table::data.table(rooms[grepl("Antiporta", rooms$Name), ])
rooms <- read_excel("report - MPH Capstone TA office hours - revised.xlsx")
rooms <- rooms %>% filter(complete.cases(rooms))
rooms <- rooms %>% mutate(date=as.Date(`Start Date`, format="%m/%d/%Y", tz="America/New_York"))
rooms <- rooms %>% arrange(date)
data.table::data.table(rooms[grepl("Antiporta", rooms$Name), ])
rooms <- read_excel("report - MPH Capstone TA office hours - revised.xlsx")
rooms <- rooms %>% filter(complete.cases(rooms))
rooms <- rooms %>% mutate(date=as.Date(`Start Date`, format="%m/%d/%Y", tz="America/New_York"))
rooms <- rooms %>% arrange(date)
tas <- c("Kundu", "Sosina", "Antiporta", "Lee", "Tormohlen", "Baker")
TAroom <- lapply(tas, function(ta) {
use <- rooms[grepl(ta, rooms$Name), ]
res <- use$Room
names(res) <- as.character(use$date)
return(res)
})
names(TAroom) = c("Prosenjit", "Kayode", "Daniel", "Hojoon", "Kayla", "Kellan")
save(TAroom, file = "TAroom.Rdata")
rsconnect::deployApp()
rooms <- read_excel("report - MPH Capstone TA office hours - revised.xlsx")
rooms <- rooms %>% filter(complete.cases(rooms))
rooms <- rooms %>% mutate(date=as.Date(`Start Date`, format="%m/%d/%Y", tz="America/New_York"))
rooms <- rooms %>% arrange(date)
tas <- c("Kundu", "Sosina", "Antiporta", "Lee", "Tormohlen", "Baker")
TAroom <- lapply(tas, function(ta) {
use <- rooms[grepl(ta, rooms$Name), ]
res <- use$Room
names(res) <- as.character(use$date)
return(res)
})
names(TAroom) = c("Prosenjit", "Kayode", "Daniel", "Hojoon", "Kayla", "Kellan")
save(TAroom, file = "TAroom.Rdata")
TAroom
