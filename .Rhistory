## Create backup just in case
saveRes(reservations, file = file.path(".", paste0("reservations_backup-", gsub("\\s|:", "_", Sys.time()), ".Rdata")), dest = file.path("github", "mphcapstoneta", "mphcapstoneta", "backups"))
## Save changes
saveRes(reservations)
## Finish
updateSelectInput(session, "reserve", choices="Reservation submitted", selected="Reservation submitted")
}
cat("\n\nYou have successfully completed your office hour reservation. You can verify this on the 'Current reservations' tab: your reservation will appear on the current slots taken.")
} else if (input$reserve %in% c("Submit reservation", "Cancel reservation")) {
updateSelectInput(session, "reserve", choices=c("", "Submit reservation", "Cancel reservation"), selected = "")
}
})
},
once = TRUE)
## Create a link to the messsage for students to download
output$message <- renderUI({
new <- newEntry()
reservations <- loadReservations()
check <- checkEntry(new, reservations, verbose=FALSE)
if(input$reserve %in% c("Cancellation registered", "Reservation submitted")) {
if(check == "Can cancel") {
emailInfo <- buildEmail(new, "cancel", verbose=FALSE, email=FALSE)
} else if(check == "Complete") {
emailInfo <- buildEmail(new, "confirm", verbose=FALSE, email=FALSE)
}
## Create link to message for students to download
confFile <- paste0("messages/", as.character(as.Date(Sys.time())), "-", as.character(round(runif(1, 1e14, 1e15 - 1), 0)), ".txt")
sink(paste0("www/", confFile))
cat(emailInfo$msg)
sink()
HTML(paste0("Download <a href='https://mphcapstoneta.shinyapps.io/mphcapstoneta/", confFile, "'>confirmation information</a>."))
} else{
HTML("")
}
})
## Update TA options
observe({
choices <- TAchoices[[input$weekday]]
updateSelectInput(session, "ta", choices=choices, selected=choices[[1]][1])
})
## Update office hour options
observe({
choices <- TAhour[[input$ta]][[input$weekday]]
## Special cases for Spring Break
#		if(input$ta %in% c("Kevin", "Leo", "Molly", "Therri")) {
#			new <- newEntry()
#			if( as.character(as.Date(new$desiredDate, tz="America/New_York")) %in% c("2014-03-15", "2014-03-16", "2014-03-17", "2014-03-18", "2014-03-19", "2014-03-20", "2014-03-21", "2014-03-22", "2014-03-23")) {
#			choices <- c("00:00")
#			}
#		}
## Special case for Youssef switching hours in the middle of 2016
#        if(input$ta == 'Youssef') {
#            new <- newEntry()
#            if( as.character(as.Date(new$desiredDate, tz = 'America/New_York')) %in% c('2016-03-31', '2016-04-01'))
#                choices <- c('00:00')
#        }
updateSelectInput(session, "hour", choices=choices, selected=choices[1])
})
## View recent details
output$recent <- renderDataTable({
if(input$tapass == tapass) {
new <- newEntry()
reservations <- loadReservationsFunc()
preDisplay <- subset(reservations, desiredDate >= new$reservationDate - input$farback * 24 * 60^2)[, c("TA", "desiredDate", "Weekday", "officeHour", "Student", "Email", "Distance", "Skype", "Concentration", "Description")]
preDisplay <- preDisplay[order(preDisplay$desiredDate), ]
preDisplay$desiredDate <- as.character(as.Date(preDisplay$desiredDate, tz="America/New_York"))
colnames(preDisplay) <- c("TA", "Date", "Weekday", "Office hour", "Student", "Email", "Distance", "Skype", "Concentration", "Description")
if(nrow(preDisplay) == 0) {
preDisplay <- data.frame("TA"="none", "Date"="none", "Weekday"="none", "Office hour"="none", "Student"="none", "Email"="none", "Distance"="none", "Skype"="none", "Concentration"="none", "Description"="none")
}
} else {
preDisplay <- data.frame("Restricted"="yes", "Access"="Failed", stringsAsFactors=FALSE)
}
preDisplay
})
## All reservations
output$taData <- downloadHandler(
filename  <-  function() { 'MPHcapstoneTAreservations2019.csv' },
content  <-  function(file) {
if(input$tapass == tapass) {
data <- loadReservationsFunc()
data <- data[!is.na(data$TA), ]
} else {
data <- data.frame("NoAccess"="EnterPassword", stringsAsFactors="FALSE")
}
write.csv(data, file)
}
)
output$taRData <- downloadHandler(
filename  <-  function() { 'reservations.Rdata' },
content  <-  function(file) {
if(input$tapass == tapass) {
data <- loadReservationsFunc()
data <- data[!is.na(data$TA), ]
} else {
data <- data.frame("NoAccess"="EnterPassword", stringsAsFactors="FALSE")
}
reservations <- data
save(reservations, file = file)
}
)
## Calendar
output$calendar <- downloadHandler(
filename <- "MPHofficeHours.ics",
content <- function(file) {
if(input$tapass == tapass) {
reservations <- loadReservationsFunc()
## Filter selected TA
if(input$taname != "All") {
reservations <- subset(reservations, TA == input$taname)
}
## Write the calendar
calendarBuild(file, reservations, FALSE)
} else {
data <- data.frame("Access"="Not verified")
write.csv(data, file)
}
)
## Show current time
output$currentTime <- renderPrint({
x <- Sys.time()
print(as.POSIXlt(x, tz = "America/New_York"), quote=FALSE)
})
## Debug time
output$debugT <- renderPrint({
new <- newEntry()
reservations <- loadReservations()
print(new$desiredDate)
cat("\n-----\n")
print(reservations$desiredDate)
})
}
library(shiny)
runApp()
library("shiny")
#library("sendmailR")
#library("mail")
library("mygmailR")
library("rdrop2")
## Load data
source("./setup_shiny.R")
load("tapass.Rdata")
load("taemails.Rdata")
load("TAroom.Rdata")
token <- readRDS("droptoken.rds")
# Loaction for my local file paths. If the github directory is on dropbox, this will be the same as dropbx_file_locs
local_drpbx_dir <- file.path(".", "mphcapstoneta", "www")
# # To use a stored token provide token location
# drop_auth(rdstoken = "droptoken.rds")
# Dropbox online file paths
dropbx_file_locs <- file.path("github", "mphcapstoneta", "mphcapstoneta", "www")
drop_download(file.path("github", "mphcapstoneta", "mphcapstoneta", "reservations.Rdata"), overwrite = TRUE, dtoken = token)
drop_download(file.path(dropbx_file_locs, "publicCalendar.ics"), local_path = file.path(local_drpbx_dir, "publicCalendar.ics"), overwrite = TRUE, dtoken = token)
if(file.exists(file.path(dropbx_file_locs, "publicCalendar-Prosenjit.ics"))){
drop_download(file.path(dropbx_file_locs, "publicCalendar-Prosenjit.ics"), local_path = file.path(local_drpbx_dir, "publicCalendar-Prosenjit.ics"), overwrite = TRUE, dtoken = token)
}
if(file.exists(file.path(dropbx_file_locs, "publicCalendar-Kayode.ics"))){
drop_download(file.path(dropbx_file_locs, "publicCalendar-Kayode.ics"), local_path = file.path(local_drpbx_dir, "publicCalendar-Kayode.ics"), overwrite = TRUE, dtoken = token)
}
if(file.exists(file.path(dropbx_file_locs, "publicCalendar-Hojoon.ics"))){
drop_download(file.path(dropbx_file_locs, "publicCalendar-Hojoon.ics"), local_path = file.path(local_drpbx_dir, "publicCalendar-Hojoon.ics"), overwrite = TRUE, dtoken = token)
}
if(file.exists(file.path(dropbx_file_locs, "publicCalendar-Kayla.ics"))){
drop_download(file.path(dropbx_file_locs, "publicCalendar-Kayla.ics"), local_path = file.path(local_drpbx_dir, "publicCalendar-Kayla.ics"), overwrite = TRUE, dtoken = token)
}
if(file.exists(file.path(dropbx_file_locs, "publicCalendar-Daniel.ics"))){
drop_download(file.path(dropbx_file_locs, "publicCalendar-Daniel.ics"), local_path = file.path(local_drpbx_dir, "publicCalendar-Daniel.ics"), overwrite = TRUE, dtoken = token)
}
if(file.exists(file.path(dropbx_file_locs, "publicCalendar-Kellan.ics"))){
drop_download(file.path(dropbx_file_locs, "publicCalendar-Kellan.ics"), local_path = file.path(local_drpbx_dir, "publicCalendar-Kellan.ics"), overwrite = TRUE, dtoken = token)
}
saveRes <- function(reservations, file = './reservations.Rdata', dest = file.path("github/mphcapstoneta")) {
save(reservations, file = file)
drop_upload(file, path = dest, dtoken = token)
}
dropbox_reservation_file <- file.path("github", "mphcapstoneta", 'reservations.rdata')
local_dropbox_reservation_file <- file.path('.', 'reservations.rdata')
reservationsHist <- drop_history(dropbox_reservation_file, limit = 10, dtoken = token)
# This is saved to my local directory!
save(reservationsHist, file = 'reservationsHist.Rdata')
## Assign room
assignRoom <- function(TA, desiredDate) {
if(TA %in% names(TAroom)) {
possibleRooms <- TAroom[[TA]]
charDate <- as.character(as.Date(desiredDate, tz="America/New_York"))
if(charDate %in% names(possibleRooms)) {
mtgRoom <- possibleRooms[[charDate]]
} else {
mtgRoom <- "*to be determined*"
}
} else {
mtgRoom <- "*to be determined*"
}
## Done
return(mtgRoom)
}
## Select the date for the reservation
getDesiredDate <- function(data) {
possible <- which(data$Weekday == weekdays(data$minimumPossible + 0:7 * 24 * 60^2))
## Find the day which works
if(length(possible) == 2) {
tmp <- as.POSIXlt(data$minimumPossible)
wantedHour <- as.integer(substr(data$officeHour, 1, 2))
if(wantedHour > tmp$hour) {
possible <- possible[1]
} else if(wantedHour == tmp$hour & as.integer(substr(data$officeHour, 4, 5)) >= tmp$min) {
possible <- possible[1]
} else {
possible <- possible[2]
}
## Construct the desired date
res <- as.POSIXlt(paste(as.Date(data$minimumPossible, tz="America/New_York") + possible - 1, substr(data$officeHour, 1, 5)), "America/New_York")
return(res)
}
## Build message
buildMsg <- function(new, tentative="*tentative* ") {
tmpSkype <- paste0(c(" (skype ID: ", new$Skype, ")"), collapse="")
## Assign room
mtgRoom <- assignRoom(new$TA, new$desiredDate)
## Construct the message
msg <- paste0(c(
"Dear ", new$Student, ", your ", tentative, "office hour reservation is with TA ", new$TA, " on ", as.character(as.Date(new$desiredDate, tz="America/New_York")), " at ", new$officeHour, ". You have specified that your email is ", new$Email, ". Furthermore, you are ", ifelse(new$Distance == "No", "not ", ""), "a distance student", ifelse(new$Distance == "Yes", tmpSkype, ""), ", and your MPH concentration is <", new$Concentration, ">.\n The meeting will be at ", mtgRoom, "."
), collapse="")
return(msg)
}
## Check that the entry is valid
checkEntry <- function(new, reservations, verbose=TRUE) {
res <- "Incomplete"
if(new$TA == "Choose a TA") {
if(verbose) cat("Guide: Please choose a TA\n")
} else if(new$Student == "Your name") {
if(verbose) cat("Guide: Please enter your name.\n")
} else if (new$Email == "Your email") {
if(verbose) cat("Guide: Please enter your email.\n")
} else if (!grepl('@', new$Email)) {
if(verbose) cat("Guide: Please enter a valid email address")
} else if (new$officeHour == "00:00"){
if(verbose) cat("Guide: Please choose a valid office hour.\n")
} else if (new$Distance == "Yes" & new$Skype == "") {
if(verbose) cat("Guide: Please provide us your Skype username.\n")
} else if (new$Concentration == "Choose your concentration") {
if(verbose) cat("Guide: Please choose your MPH concentration.\n")
} else {
## Does the reservation already exist? Cancelling?
pre <- subset(reservations, TA == new$TA & tolower(trimws(Student)) == tolower(trimws(new$Student)) &
tolower(trimws(Email)) == tolower(trimws(new$Email)) & Distance == new$Distance &
tolower(Skype) == tolower(new$Skype) & Concentration == new$Concentration & desiredDate == new$desiredDate)
## Is there an overlap? Someone reserved the slot already?
ov <- subset(reservations, TA == new$TA & desiredDate == new$desiredDate)
## Do you already have a reservation?
gotone <- subset(reservations, tolower(trimws(Student)) == tolower(trimws(new$Student)) &
tolower(trimws(Email)) == tolower(trimws(new$Email)) &
Distance == new$Distance & tolower(Skype) == tolower(new$Skype) &
Concentration == new$Concentration & desiredDate >= new$reservationDate)
if (nrow(ov) > 0 & nrow(pre) ==  0) {
if(verbose) cat("Guide: Someone else already reserved the slot you are interested in. Please choose a different time.\n")
res <- "Invalid"
} else if(nrow(pre) > 0) {
if(verbose) cat("Guide: If you want to cancel your reservation, you may now do so by choosing the appropriate action.\n")
res <- "Can cancel"
} else if (nrow(gotone) > 0){
if(verbose) cat("Guide: You already have a scheduled office hour and thus cannot make a second reservation. Please come back after your office hour.\n")
res <- "Invalid"
} else if (new$Description == "Fill out" | nchar(new$Description) < 20) {
if(verbose) cat("Guide: Please describe your problem. The description has to be at least 20 characters long.\n")
} else {
if(verbose) cat("Guide: You may now proceed to submitting your reservation.\n")
res <- "Complete"
}
return(res)
}
## Construct dates for the calendar
constructDate <- function(x) {
y <- as.POSIXlt(x)
year <- as.character(y$year + 1900)
tmp <- as.character(y$mon + 1)
mon <- ifelse(nchar(tmp) == 1, paste0(c("0", tmp), collapse=""), tmp)
tmp <- as.character(y$mday)
mday <- ifelse(nchar(tmp) == 1, paste0(c("0", tmp), collapse=""), tmp)
tmp <- as.character(y$hour)
hour <- ifelse(nchar(tmp) == 1, paste0(c("0", tmp), collapse=""), tmp)
tmp <- as.character(y$min)
minute <- ifelse(nchar(tmp) == 1, paste0(c("0", tmp), collapse=""), tmp)
paste0(year, mon, mday, "T", hour, minute, "00")
}
## Build calendar
calendarBuild <- function(file, reservations, public=TRUE) {
reservations <- reservations[!is.na(reservations$TA), ]
sink(file)
cat("BEGIN:VCALENDAR\n")
cat("VERSION:2.0\n")
cat("PRODID:-//JHSPH//MPHcapstone//EN\n")
for (i in seq_len(nrow(reservations))) {
stamp <- constructDate(reservations$reservationDate[i])
start <- constructDate(reservations$desiredDate[i])
end <- constructDate(reservations$desiredDate[i] + 30 * 60)
cat("BEGIN:VEVENT\n")
if(public) {
cat(paste("SUMMARY: TA", reservations$TA[i], "Student", reservations$Student[i], "Location", assignRoom(reservations$TA[i], reservations$desiredDate[i]), "\n", sep=" "))
} else {
cat(paste("SUMMARY:", reservations$Student[i], reservations$Email[i], reservations$Skype[i], reservations$Concentration[i], assignRoom(reservations$TA[i], reservations$desiredDate[i]), "\n", sep=" "))
}
cat(paste0("DTSTAMP:", stamp, "\n"))
cat(paste0("DTSTART;TZID=US/Eastern:", start, "\n"))
cat(paste0("DTEND;TZID=US/Eastern:", end, "\n"))
cat("END:VEVENT\n")
}
cat("END:VCALENDAR")
cat("\n")
sink()
drop_upload(file, path = "github/mphcapstoneta/www", dtoken = token)
}
## Build email msg
buildEmail <- function(new, action="confirm", verbose=TRUE, email=TRUE) {
tentative <- ifelse(action == "confirm", "*confirmed* ", "*cancelled* ")
msg <- buildMsg(new, tentative)
msg <- paste0(msg, "\n\nProblem description:\n", new$Description)
if(action=="confirm") {
msgStudent <- paste0(msg, "\n\nIf for some reason you need to cancel your reservation (minimum 24 hrs notice), please do so through https://mphcapstoneta.shinyapps.io/mphcapstoneta/. You will have to choose the TA, office hour, enter your name, email and MPH concentration (to verify your identity) in order to cancel.")
subject <- paste("New TA reservation:", as.character(as.Date(new$desiredDate, tz="America/New_York")), "at", new$officeHour)
} else {
subject <- paste("Cancelled TA reservation:", as.character(as.Date(new$desiredDate, tz="America/New_York")), "at", new$officeHour)
msgStudent <- paste0(msg, "\n\n Hopefully everything is ok. Please try to minimize as much as the number of times you have to cancel a TA office hour reservation.")
}
if(email) {
msg <- paste0("Reservation details\n-------------------------------\n\n", msg, "\n\n-------------------------------\nPlease do not reply to this email address as no one is checking it.")
} else {
msg <- paste0("Reservation details\n-------------------------------\n\n", msg, "\n\n-------------------------------\n\n")
}
# msgStudent <- paste0(msgStudent, "\n\n-------------------------------\nPlease do not reply to this email address as no one is checking it.")
## Send emails
#	cat(taemails$email[taemails$ta == new$TA])
#	cat(msg)
#	cat(paste0("<", new$Email, ">"))
if(verbose) {
cat("\n\n")
cat(msgStudent)
}
res <- list(to=taemails$email[taemails$ta == new$TA], subject=subject, msg=msg, from = NA)
return(res)
}
## Send email
confirmEmail <- function(from, to, subject, msg) {
## will not work unless address is @gmail.com
#	sendmail(from, to=paste0("<", new$Email, ">"), subject=subject, msg=msgStudent, control=list(smtpServer="ASPMX.L.GOOGLE.COM"))
#	from <- sprintf("<mphcapstoneta@gmail.com>")
## Currently not working (2015-01-20) with sendmailR
#sendmail(from, to=to, subject=subject, msg=msg, control=list(smtpServer="ASPMX.L.GOOGLE.COM"))
#    mail::sendmail(recipient = to, subject = subject, message = msg)
msg <- gsub("\n", "\\\\n", msg)
msg <- gsub("\"|'", "*", msg)
## works locally but not from deployed app.
## Looks to be issue with Google's security measures
send_gmail(subject = subject, body = msg, to = as.character(to), dir_private = ".", file_private = "gmail_acct.gmail_private")
return("\n")
}
## Load previous data
loadReservationsFunc <- function() {
if(file.exists("reservations.Rdata") & file.exists('reservationsHist.Rdata')) {
load('reservationsHist.Rdata')
## Check if it's the latest version
newHist <- drop_history(dropbox_reservation_file, dtoken = token)
if(!identical(newHist, reservationsHist)) {
drop_download(dropbox_reservation_file, overwrite = TRUE, dtoken = token)
}
load("reservations.Rdata")
} else {
reservations <- data.frame("TA"=NA, "Weekday"=NA, "officeHour"=NA, "Student"=NA, "Email"=NA, "Distance"=NA, "Skype"=NA, "reservationDate"=Sys.time() -1, "Concentration"=NA, "Description"=NA, "minimumPossible"=as.POSIXlt(Sys.time() -1, "America/New_York"), "desiredDate"=as.POSIXlt(Sys.time() -1, "America/New_York"), stringsAsFactors=FALSE)
saveRes(reservations)
}
reservations$reservationDate <- as.POSIXlt(reservations$reservationDate, "America/New_York")
reservations$minimumPossible <- as.POSIXlt(reservations$minimumPossible, "America/New_York")
#reservations$desiredDate <- as.POSIXlt(reservations$desiredDate, "America/New_York")
reservations
}
loadReservationsFunc()
load('reservationsHist.Rdata')
View(reservationsHist)
drop_history(dropbox_reservation_file, dtoken = token)
reservationsHist <- drop_history(dropbox_reservation_file, limit = 10, dtoken = token)
# This is saved to my local directory!
save(reservationsHist, file = 'reservationsHist.Rdata')
reservationsHist
View(reservationsHist)
## Check if it's the latest version
newHist <- drop_history(dropbox_reservation_file, dtoken = token)
identical(newHist, reservationsHist)
library(shiny)
runApp()
getwd()
load("reservations.Rdata")
reservations
rbind(reservations[-c(2),],
data.frame("TA"="Daniel", "Weekday"="Monday", "officeHour"="13:30-14:00", "Student"="Isabella Gomes", "Email"="igomes3@jhu.edu", "Distance"="No", "Skype"="", "reservationDate"="2019-01-30 14:35:18 EST", "Concentration"="3. Epidemiologic & Biostatistics Methods for Public Health & Clinical Research", "Description"="Am dealing with a composite outcome, having issues with data management.",
"minimumPossible"= "2019-02-02 19:36:11", "desiredDate"="2019-02-04 13:30:00", stringsAsFactors=FALSE),
data.frame("TA"="Kayla", "Weekday"="Monday", "officeHour"="14:30-15:00", "Student"="Anisa Sanghrajka", "Email"="asanghr1@jhu.edu", "Distance"="No", "Skype"="", "reservationDate"="2019-01-31 20:54:18 EST", "Concentration"="10. Social & Behavioral Sciences in Public Health", "Description"="Hi Kayla! I am hoping to brainstorm ideas for my capstone project, which will be a continuation of my practicum experience (developing a curriculum for a mindfulness intervention in Baltimore City High School)", "minimumPossible"="2019-02-02 19:36:11", "desiredDate"="2019-02-04 14:30:00", stringsAsFactors=FALSE),
data.frame("TA"="Kayla", "Weekday"="Monday", "officeHour"="15:00-15:30", "Student"="Jenna", "Email"="jdifili1@jhmi.edu", "Distance"="No", "Skype"="", "reservationDate"="2019-01-31 14:38:18 EST", "Concentration"="6. Health in Crisis & Humanitarian Assistance", "Description"="General format and structure of a literature review with some Mesh term clarification. ", "minimumPossible"="2019-02-02 19:36:11", "desiredDate"="2019-02-04 15:00:00", stringsAsFactors=FALSE))
reservations <- rbind(reservations[-c(2),],
data.frame("TA"="Daniel", "Weekday"="Monday", "officeHour"="13:30-14:00", "Student"="Isabella Gomes", "Email"="igomes3@jhu.edu", "Distance"="No", "Skype"="", "reservationDate"="2019-01-30 14:35:18 EST", "Concentration"="3. Epidemiologic & Biostatistics Methods for Public Health & Clinical Research", "Description"="Am dealing with a composite outcome, having issues with data management.",
"minimumPossible"= "2019-02-02 19:36:11", "desiredDate"="2019-02-04 13:30:00", stringsAsFactors=FALSE),
data.frame("TA"="Kayla", "Weekday"="Monday", "officeHour"="14:30-15:00", "Student"="Anisa Sanghrajka", "Email"="asanghr1@jhu.edu", "Distance"="No", "Skype"="", "reservationDate"="2019-01-31 20:54:18 EST", "Concentration"="10. Social & Behavioral Sciences in Public Health", "Description"="Hi Kayla! I am hoping to brainstorm ideas for my capstone project, which will be a continuation of my practicum experience (developing a curriculum for a mindfulness intervention in Baltimore City High School)", "minimumPossible"="2019-02-02 19:36:11", "desiredDate"="2019-02-04 14:30:00", stringsAsFactors=FALSE),
data.frame("TA"="Kayla", "Weekday"="Monday", "officeHour"="15:00-15:30", "Student"="Jenna", "Email"="jdifili1@jhmi.edu", "Distance"="No", "Skype"="", "reservationDate"="2019-01-31 14:38:18 EST", "Concentration"="6. Health in Crisis & Humanitarian Assistance", "Description"="General format and structure of a literature review with some Mesh term clarification. ", "minimumPossible"="2019-02-02 19:36:11", "desiredDate"="2019-02-04 15:00:00", stringsAsFactors=FALSE))
saveRes(reservations)
?drop_upload
library(shiny)
runApp()
load("reservations.Rdata")
reservations
reservations <- rbind(reservations[-c(2),],
data.frame("TA"="Daniel", "Weekday"="Monday", "officeHour"="13:30-14:00", "Student"="Isabella Gomes", "Email"="igomes3@jhu.edu", "Distance"="No", "Skype"="", "reservationDate"="2019-01-30 14:35:18 EST", "Concentration"="3. Epidemiologic & Biostatistics Methods for Public Health & Clinical Research", "Description"="Am dealing with a composite outcome, having issues with data management.",
"minimumPossible"= "2019-02-02 19:36:11", "desiredDate"="2019-02-04 13:30:00", stringsAsFactors=FALSE),
data.frame("TA"="Kayla", "Weekday"="Monday", "officeHour"="14:30-15:00", "Student"="Anisa Sanghrajka", "Email"="asanghr1@jhu.edu", "Distance"="No", "Skype"="", "reservationDate"="2019-01-31 20:54:18 EST", "Concentration"="10. Social & Behavioral Sciences in Public Health", "Description"="Hi Kayla! I am hoping to brainstorm ideas for my capstone project, which will be a continuation of my practicum experience (developing a curriculum for a mindfulness intervention in Baltimore City High School)", "minimumPossible"="2019-02-02 19:36:11", "desiredDate"="2019-02-04 14:30:00", stringsAsFactors=FALSE),
data.frame("TA"="Kayla", "Weekday"="Monday", "officeHour"="15:00-15:30", "Student"="Jenna", "Email"="jdifili1@jhmi.edu", "Distance"="No", "Skype"="", "reservationDate"="2019-01-31 14:38:18 EST", "Concentration"="6. Health in Crisis & Humanitarian Assistance", "Description"="General format and structure of a literature review with some Mesh term clarification. ", "minimumPossible"="2019-02-02 19:36:11", "desiredDate"="2019-02-04 15:00:00", stringsAsFactors=FALSE))
saveRes(reservations)
library(shiny)
runApp()
load("reservations.Rdata")
reservations
reservations <- rbind(reservations[-c(2),],
data.frame("TA"="Daniel", "Weekday"="Monday", "officeHour"="13:30-14:00", "Student"="Isabella Gomes", "Email"="igomes3@jhu.edu", "Distance"="No", "Skype"="", "reservationDate"="2019-01-30 14:35:18 EST", "Concentration"="3. Epidemiologic & Biostatistics Methods for Public Health & Clinical Research", "Description"="Am dealing with a composite outcome, having issues with data management.",
"minimumPossible"= "2019-02-02 19:36:11", "desiredDate"="2019-02-04 13:30:00", stringsAsFactors=FALSE),
data.frame("TA"="Kayla", "Weekday"="Monday", "officeHour"="14:30-15:00", "Student"="Anisa Sanghrajka", "Email"="asanghr1@jhu.edu", "Distance"="No", "Skype"="", "reservationDate"="2019-01-31 20:54:18 EST", "Concentration"="10. Social & Behavioral Sciences in Public Health", "Description"="Hi Kayla! I am hoping to brainstorm ideas for my capstone project, which will be a continuation of my practicum experience (developing a curriculum for a mindfulness intervention in Baltimore City High School)", "minimumPossible"="2019-02-02 19:36:11", "desiredDate"="2019-02-04 14:30:00", stringsAsFactors=FALSE),
data.frame("TA"="Kayla", "Weekday"="Monday", "officeHour"="15:00-15:30", "Student"="Jenna", "Email"="jdifili1@jhmi.edu", "Distance"="No", "Skype"="", "reservationDate"="2019-01-31 14:38:18 EST", "Concentration"="6. Health in Crisis & Humanitarian Assistance", "Description"="General format and structure of a literature review with some Mesh term clarification. ", "minimumPossible"="2019-02-02 19:36:11", "desiredDate"="2019-02-04 15:00:00", stringsAsFactors=FALSE))
saveRes(reservations)
?drop_download
library(shiny)
runApp()
rsconnect::deployApp()
reservations
rbind(reservations,
data.frame("TA"="Daniel", "Weekday"="Monday", "officeHour"="13:30-14:00", "Student"="Cristina Mannie", "Email"="cmannie1@jhu.edu", "Distance"="Yes", "Skype"="live:cristina.mannie", "reservationDate"="2019-02-04 14:38:18 EST", "Concentration"="1. MPH Customized Program of Study", "Description"="Performing an analysis of the health status of privately insured lives by geographical region in South Africa. (Secondary data analysis using data on over 2 million lives from a large managed care organization in SA) I*m using SQL and R to produce maps of the health status score across the country to illustrate differences in health status. I*d like to be able to make some associations between the health status of individuals and risk factors in various areas. Need help with taking some methodological decisions and defining my study outline.", "minimumPossible"="2019-02-04 19:36:11", "desiredDate"="2019-02-11 13:30:00", stringsAsFactors=FALSE))
rbind(reservations[-3],
data.frame("TA"="Daniel", "Weekday"="Monday", "officeHour"="13:30-14:00", "Student"="Cristina Mannie", "Email"="cmannie1@jhu.edu", "Distance"="Yes", "Skype"="live:cristina.mannie", "reservationDate"="2019-02-04 14:38:18 EST", "Concentration"="1. MPH Customized Program of Study", "Description"="Performing an analysis of the health status of privately insured lives by geographical region in South Africa. (Secondary data analysis using data on over 2 million lives from a large managed care organization in SA) I*m using SQL and R to produce maps of the health status score across the country to illustrate differences in health status. I*d like to be able to make some associations between the health status of individuals and risk factors in various areas. Need help with taking some methodological decisions and defining my study outline.", "minimumPossible"="2019-02-04 19:36:11", "desiredDate"="2019-02-11 13:30:00", stringsAsFactors=FALSE),
data.frame("TA"="Kayode", "Weekday"="Tuesday", "officeHour"="15:00-15:30", "Student"="Ekta Paw", "Email"="epaw1@jhu.edu", "Distance"="No", "Skype"="", "reservationDate"="2019-02-04 14:38:18 EST", "Concentration"="8. Health Systems & Policy", "Description"="I am looking at patients with facial fractures using the national trauma data bank and trying to see if there is a relationship between alcohol use and various fracture patterns, or likelihood of surgery, likelihood of surgical complications etc. I want some advice as to whether the statistical tests I*m using are appropriate for my variables given that both my dependent and independent variables are categorical. I am doing my analysis in STATA..", "minimumPossible"="2019-02-04 19:36:11", "desiredDate"="2019-02-05 15:00:00", stringsAsFactors=FALSE),
data.frame("TA"="Prosenjit", "Weekday"="Tuesday", "officeHour"="13:45-14:15", "Student"="Pragna Shetty", "Email"="pragna.shetty@jhu.edu", "Distance"="No", "Skype"="", "reservationDate"="2019-01-30 14:38:18 EST", "Concentration"="1. MPH Customized Program of Study", "Description"="I need help using STATA for a longitudinal study using the HSCRC.", "minimumPossible"="2019-02-01 19:36:11", "desiredDate"="2019-02-05 13:45:00", stringsAsFactors=FALSE))
reservations
reservations[-3,]
rbind(reservations[-3,],
data.frame("TA"="Daniel", "Weekday"="Monday", "officeHour"="13:30-14:00", "Student"="Cristina Mannie", "Email"="cmannie1@jhu.edu", "Distance"="Yes", "Skype"="live:cristina.mannie", "reservationDate"="2019-02-04 14:38:18 EST", "Concentration"="1. MPH Customized Program of Study", "Description"="Performing an analysis of the health status of privately insured lives by geographical region in South Africa. (Secondary data analysis using data on over 2 million lives from a large managed care organization in SA) I*m using SQL and R to produce maps of the health status score across the country to illustrate differences in health status. I*d like to be able to make some associations between the health status of individuals and risk factors in various areas. Need help with taking some methodological decisions and defining my study outline.", "minimumPossible"="2019-02-04 19:36:11", "desiredDate"="2019-02-11 13:30:00", stringsAsFactors=FALSE),
data.frame("TA"="Kayode", "Weekday"="Tuesday", "officeHour"="15:00-15:30", "Student"="Ekta Paw", "Email"="epaw1@jhu.edu", "Distance"="No", "Skype"="", "reservationDate"="2019-02-04 14:38:18 EST", "Concentration"="8. Health Systems & Policy", "Description"="I am looking at patients with facial fractures using the national trauma data bank and trying to see if there is a relationship between alcohol use and various fracture patterns, or likelihood of surgery, likelihood of surgical complications etc. I want some advice as to whether the statistical tests I*m using are appropriate for my variables given that both my dependent and independent variables are categorical. I am doing my analysis in STATA.", "minimumPossible"="2019-02-04 19:36:11", "desiredDate"="2019-02-05 15:00:00", stringsAsFactors=FALSE),
data.frame("TA"="Prosenjit", "Weekday"="Tuesday", "officeHour"="13:45-14:15", "Student"="Pragna Shetty", "Email"="pragna.shetty@jhu.edu", "Distance"="No", "Skype"="", "reservationDate"="2019-01-30 14:38:18 EST", "Concentration"="1. MPH Customized Program of Study", "Description"="I need help using STATA for a longitudinal study using the HSCRC.", "minimumPossible"="2019-02-01 19:36:11", "desiredDate"="2019-02-05 13:45:00", stringsAsFactors=FALSE))
reservations <- rbind(reservations[-3,],
data.frame("TA"="Daniel", "Weekday"="Monday", "officeHour"="13:30-14:00", "Student"="Cristina Mannie", "Email"="cmannie1@jhu.edu", "Distance"="Yes", "Skype"="live:cristina.mannie", "reservationDate"="2019-02-04 14:38:18 EST", "Concentration"="1. MPH Customized Program of Study", "Description"="Performing an analysis of the health status of privately insured lives by geographical region in South Africa. (Secondary data analysis using data on over 2 million lives from a large managed care organization in SA) I*m using SQL and R to produce maps of the health status score across the country to illustrate differences in health status. I*d like to be able to make some associations between the health status of individuals and risk factors in various areas. Need help with taking some methodological decisions and defining my study outline.", "minimumPossible"="2019-02-04 19:36:11", "desiredDate"="2019-02-11 13:30:00", stringsAsFactors=FALSE),
data.frame("TA"="Kayode", "Weekday"="Tuesday", "officeHour"="15:00-15:30", "Student"="Ekta Paw", "Email"="epaw1@jhu.edu", "Distance"="No", "Skype"="", "reservationDate"="2019-02-04 14:38:18 EST", "Concentration"="8. Health Systems & Policy", "Description"="I am looking at patients with facial fractures using the national trauma data bank and trying to see if there is a relationship between alcohol use and various fracture patterns, or likelihood of surgery, likelihood of surgical complications etc. I want some advice as to whether the statistical tests I*m using are appropriate for my variables given that both my dependent and independent variables are categorical. I am doing my analysis in STATA.", "minimumPossible"="2019-02-04 19:36:11", "desiredDate"="2019-02-05 15:00:00", stringsAsFactors=FALSE),
data.frame("TA"="Prosenjit", "Weekday"="Tuesday", "officeHour"="13:45-14:15", "Student"="Pragna Shetty", "Email"="pragna.shetty@jhu.edu", "Distance"="No", "Skype"="", "reservationDate"="2019-01-30 14:38:18 EST", "Concentration"="1. MPH Customized Program of Study", "Description"="I need help using STATA for a longitudinal study using the HSCRC.", "minimumPossible"="2019-02-01 19:36:11", "desiredDate"="2019-02-05 13:45:00", stringsAsFactors=FALSE))
saveRes(reservations)
library(shiny)
runApp()
rsconnect::deployApp()
load("reservations.Rdata")
reservations
rbind(reservations,
data.frame("TA"="Kayla", "Weekday"="Monday", "officeHour"="15:30-16:00", "Student"="Marjanna Barber-Dubois", "Email"="mbarbe19@jhmi.edu", "Distance"="Yes", "Skype"="mebarberdubois", "reservationDate"="2019-02-04 14:38:18 EST", "Concentration"="1. MPH Customized Program of Study", "Description"="I would like to know if I*m on the right track with the outline for the capstone, and would also like the opportunity to get some advice on structuring a literature review.", "minimumPossible"="2019-02-04 19:36:11", "desiredDate"="2019-02-04 15:30:00", stringsAsFactors=FALSE))
reservations <- rbind(reservations,
data.frame("TA"="Kayla", "Weekday"="Monday", "officeHour"="15:30-16:00", "Student"="Marjanna Barber-Dubois", "Email"="mbarbe19@jhmi.edu", "Distance"="Yes", "Skype"="mebarberdubois", "reservationDate"="2019-02-04 14:38:18 EST", "Concentration"="1. MPH Customized Program of Study", "Description"="I would like to know if I*m on the right track with the outline for the capstone, and would also like the opportunity to get some advice on structuring a literature review.", "minimumPossible"="2019-02-04 19:36:11", "desiredDate"="2019-02-04 15:30:00", stringsAsFactors=FALSE))
saveRes(reservations)
library(shiny)
runApp()
rsconnect::deployApp()
library(shiny)
runApp()
rsconnect::deployApp()
options(rsconnect.check.certificate = F)
rsconnect::deployApp()
library(shiny)
runApp()
library(shiny)
runApp()
library(shiny)
runApp()
library(shiny)
runApp()
library(shiny)
runApp()
options(rsconnect.check.certificate = F)
rsconnect::deployApp()
options(rsconnect.check.certificate = F)
rsconnect::deployApp()
library(shiny)
runApp()
options(rsconnect.check.certificate = F)
rsconnect::deployApp()
library(readxl)
library(dplyr)
dir()
library(readxl)
library(dplyr)
#rooms <- read_excel("report - MPH Capstone TA office hours - revised.xlsx")
rooms <- read_excel("TA Capstone hours_4th Term.xlsx")
rooms <- rooms %>% filter(complete.cases(rooms))
rooms <- rooms %>% mutate(date=as.Date(`Date`, format="%m/%d/%Y", tz="America/New_York"))
rooms <- rooms %>% arrange(date)
rooms
tas <- c("Kundu", "Sosina", "Antiporta", "Lee", "Tormohlen", "Baker")
TAroom <- lapply(tas, function(ta) {
use <- rooms[grepl(ta, rooms$Name), ]
res <- use$Room
names(res) <- as.character(use$date)
return(res)
})
names(TAroom) = c("Prosenjit", "Kayode", "Daniel", "Hojoon", "Kayla", "Kellan")
save(TAroom, file = "TAroom.Rdata")
library(shiny)
runApp()
options(rsconnect.check.certificate = F)
rsconnect::deployApp()
options(rsconnect.check.certificate = T)
BiocInstaller::biocLite("nloptr")
BiocInstaller::biocLite("Rcpp")
BiocInstaller::biocLite("RcppArmadillo")
BiocInstaller::biocLite("gsl")
BiocInstaller::biocLite("BH")
